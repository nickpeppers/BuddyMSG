<doc>
    <assembly>
        <name>Buddy</name>
    </assembly>
    <members>
        <member name="Buddy.ApplicationStatistics.TotalAlbums">
            <summary />
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ApplicationStatistics.TotalAppMetadata">
            <summary />
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ApplicationStatistics.TotalCrashes">
            <summary />
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ApplicationStatistics.TotalDeviceInformation">
            <summary />
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ApplicationStatistics.TotalFriends">
            <summary />
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ApplicationStatistics.TotalGamePlayers">
            <summary />
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ApplicationStatistics.TotalGameScores">
            <summary />
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ApplicationStatistics.TotalMessages">
            <summary />
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ApplicationStatistics.TotalPhotos">
            <summary>
            This is the combined total of all profile photos and photo album photos for the application
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ApplicationStatistics.TotalPushMessages">
            <summary>
            This is the combined total of all push notifications sent for all platforms supported 
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ApplicationStatistics.TotalUserCheckins">
            <summary />
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ApplicationStatistics.TotalUserMetadata">
            <summary />
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ApplicationStatistics.TotalUsers">
            <summary />
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.BatchSumAsync">
            <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
            <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
            <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
            <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
            <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
            <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
            <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            Unlike the 'Sum' method this method can take a list of keys separated by semicolons and will return a list of sums for all of those keys.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;MetadataSum&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.BatchSumAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of sums corresponding to all the keys that were given to this method.</param>
            <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
            <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
            <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
            <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
            <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
            <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            Unlike the 'Sum' method this method can take a list of keys separated by semicolons and will return a list of sums for all of those keys.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.DeleteAllAsync">
            <summary>
            Delete all application metadata. There is no way to recover from this operation, be careful when you call it.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.DeleteAllAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if all metadata was deleted, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Delete all application metadata. There is no way to recover from this operation, be careful when you call it.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.DeleteAsync">
            <param name="key">A valid key of a metadata item. The key can't be null or mpety.</param>
            <summary>
            Delete a metadata item referenced by key.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.DeleteAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the item was deleted, false otherwise (i.e. doesn't exist).</param>
            <param name="key">A valid key of a metadata item. The key can't be null or mpety.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Delete a metadata item referenced by key.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.FindAsync">
            <param name="searchDistanceMeters">The distance in meters from the latitude and longitude to search in. To ignore this distance pass in 40075000 (the circumferance of the earth).</param>
            <param name="latitude">The latitude from where the saerch will start.</param>
            <param name="longitude">The longitude from where the saerch will start.</param>
            <param name="numberOfResults">Optionally limit the number of returned metadata items.</param>
            <param name="withKey">Optionally search for items with a specific key. The value of this parameter is treated as a wildcard.</param>
            <param name="withValue">Optionally search for items with a specific value. The value of this parameter is treated as a wildcard.</param>
            <param name="updatedMinutesAgo">Optionally return only items that were updated some minutes ago.</param>
            <param name="valueMin">Optionally search for metadata item values that are bigger than this number.</param>
            <param name="valueMax">Optionally search for metadata item values that are smaller than this number.</param>
            <param name="searchAsFloat">Optionally treat all metadata values as floats. Useful for min/max searches.</param>
            <param name="sortAscending">Optionally sort the results ascending.</param>
            <param name="disableCache">Optionally disable cache searches.</param>
            <summary>
            Search for metadata items in this application. Note that this method will only find app-level metadata items.
            </summary>
            <returns>A Task&lt;IDictionary&lt;String,MetadataItem&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.FindAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a dictionary of metadata keys mapped to items.</param>
            <param name="searchDistanceMeters">The distance in meters from the latitude and longitude to search in. To ignore this distance pass in 40075000 (the circumferance of the earth).</param>
            <param name="latitude">The latitude from where the saerch will start.</param>
            <param name="longitude">The longitude from where the saerch will start.</param>
            <param name="numberOfResults">Optionally limit the number of returned metadata items.</param>
            <param name="withKey">Optionally search for items with a specific key. The value of this parameter is treated as a wildcard.</param>
            <param name="withValue">Optionally search for items with a specific value. The value of this parameter is treated as a wildcard.</param>
            <param name="updatedMinutesAgo">Optionally return only items that were updated some minutes ago.</param>
            <param name="valueMin">Optionally search for metadata item values that are bigger than this number.</param>
            <param name="valueMax">Optionally search for metadata item values that are smaller than this number.</param>
            <param name="searchAsFloat">Optionally treat all metadata values as floats. Useful for min/max searches.</param>
            <param name="sortAscending">Optionally sort the results ascending.</param>
            <param name="disableCache">Optionally disable cache searches.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Search for metadata items in this application. Note that this method will only find app-level metadata items.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.GetAllAsync">
            <summary>
            Get all the metadata items for this application. Note that this can be a very expensive method, try to retrieve specific items if possible
            or do a search.
            </summary>
            <returns>A Task&lt;IDictionary&lt;String,MetadataItem&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.GetAllAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of all of the application metadata items.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get all the metadata items for this application. Note that this can be a very expensive method, try to retrieve specific items if possible
            or do a search.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.GetAsync">
            <param name="key">The key to use to reference the metadata item.</param>
            <summary>
            Get a metadata item with a key. The key can't be null or an empty string.
            </summary>
            <returns>A Task&lt;MetadataItem&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.GetAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the metadata item or null if it doesn't exist.</param>
            <param name="key">The key to use to reference the metadata item.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a metadata item with a key. The key can't be null or an empty string.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.SetAsync">
            <param name="key">The key of the metadata item, can't be null or empty.</param>
            <param name="value">The value of the metadata item, can't be null.</param>
            <param name="latitude">The optional latitude of the metadata item.</param>
            <param name="longitude">The optional longitude of the metadata item.</param>
            <param name="appTag">The optional application tag for this item.</param>
            <summary>
            Set a metadata item value for a key. You can additional add latitude and longitude coordinate to record the location
            from where this item was set, or tag the item with a custom tag. 
            The item doesn't have to exist to be set, this method acts as an Add method in cases where the item doesn't exist.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.SetAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the item was set, false otherwise..</param>
            <param name="key">The key of the metadata item, can't be null or empty.</param>
            <param name="value">The value of the metadata item, can't be null.</param>
            <param name="latitude">The optional latitude of the metadata item.</param>
            <param name="longitude">The optional longitude of the metadata item.</param>
            <param name="appTag">The optional application tag for this item.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Set a metadata item value for a key. You can additional add latitude and longitude coordinate to record the location
            from where this item was set, or tag the item with a custom tag. 
            The item doesn't have to exist to be set, this method acts as an Add method in cases where the item doesn't exist.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.SumAsync">
            <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
            <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
            <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
            <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
            <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
            <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
            <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            </summary>
            <returns>A Task&lt;MetadataSum&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AppMetadata.SumAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a sum of all the found metadata item values.</param>
            <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
            <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
            <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
            <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
            <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
            <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.AddProfilePhoto">
            <param name="blob">To be added.</param>
            <param name="appTag">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.AddProfilePhotoAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the profile photo was added, false otherwise.</param>
            <param name="blob">An array of bytes that represent the image you are adding.</param>
            <param name="appTag">An optional tag for the photo.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Add a profile photo for this user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.CelebrityMode">
            <summary>
            Gets whether celebrity mode is enabled for this user. When enabled the user will be hidden from all searches in the system.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.CheckInAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the check-in was successful, false otherwise.</param>
            <param name="latitude">The latitude of the location.</param>
            <param name="longitude">The longitude of the location.</param>
            <param name="comment">An optional comment for the check-in.</param>
            <param name="appTag">An optional application specific tag for the location.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Check-in the user at a location.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.Commerce">
            <summary>
            Gets an object that can be used for commerce for the user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.DeleteAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the user was deleted, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Delete this user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.DeleteProfilePhotoAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="picture">The photo to delete.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Delete a profile photo for this user. You can use the GetProfilePhotosAsync method to retrieve all the profile photos.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.Email">
            <summary>
            Gets the email of the user. Can be an empty string or null.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.FindUser">
            <param name="userNameToFetch">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.FindUserAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the user account associated with the ID.</param>
            <param name="id">The ID of the user, must be bigger than 0.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Find the public profile of a user from their unique User ID. This method can be used to find any user associated with this Application.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
            <exception cref="T:Buddy.BuddyServiceException">With value: InvalidUserId, when the user ID doesn't exist in the system.</exception>
        </member>
        <member name="Buddy.AuthenticatedUser.FindUserAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of users that was found by this search, or an empty list if there are no results.</param>
            <param name="latitude">The latitude of the position to search from. Must be a value between -90.0 and 90.0.</param>
            <param name="longitude">The Longitude of the position to search from. Must be a value between -180.0 and 180.0.</param>
            <param name="searchDistance">The distance in meters from the specified latitude/longitude to search for results. To ignore this distance pass in 40075000 (the circumferance of the earth).</param>
            <param name="recordLimit">The maximum number of users to return with this search.</param>
            <param name="gender">The gender of the users, use UserGender.Any to search for both.</param>
            <param name="ageStart">Specifies the starting age for the range of ages to search in. The value must be &gt;= 0.</param>
            <param name="ageStop">Specifies the ending age for the range of ages to search in. The value must be &gt; ageStart.</param>
            <param name="status">The status of the users to search for. Use UserStatus.Any to ignore this parameter.</param>
            <param name="checkinsWithinMinutes">Filter for users who have checked-in in the past 'checkinsWithinMinutes' number of minutes.</param>
            <param name="appTag">Search for the custom appTag that was stored with the user.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Find the public profiles of all users that match the serch parameters.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
            <exception cref="T:System.ArgumentException">When latitude or longitude are incorrect.</exception>
        </member>
        <member name="Buddy.AuthenticatedUser.FindUsersAsync">
            <param name="latitude">The latitude of the position to search from. Must be a value between -90.0 and 90.0.</param>
            <param name="longitude">The Longitude of the position to search from. Must be a value between -180.0 and 180.0.</param>
            <param name="searchDistance">The distance in meters from the specified latitude/longitude to search for results. To ignore this distance pass in 40075000 (the circumferance of the earth).</param>
            <param name="recordLimit">The maximum number of users to return with this search.</param>
            <param name="gender">The gender of the users, use UserGender.Any to search for both.</param>
            <param name="ageStart">Specifies the starting age for the range of ages to search in. The value must be &gt;= 0.</param>
            <param name="ageStop">Specifies the ending age for the range of ages to search in. The value must be &gt; ageStart.</param>
            <param name="status">The status of the users to search for. Use UserStatus.Any to ignore this parameter.</param>
            <param name="checkinsWithinMinutes">Filter for users who have checked-in in the past 'checkinsWithinMinutes' number of minutes.</param>
            <param name="appTag">Search for the custom appTag that was stored with the user.</param>
            <summary>To be added.</summary>
            <returns>A Task&lt;IEnumerable&lt;User&gt;&gt; that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
            <exception cref="T:System.ArgumentException">When latitude or longitude are incorrect.</exception>
        </member>
        <member name="Buddy.AuthenticatedUser.Friends">
            <summary>
            Gets the collection of friends for this user. Note that the actual friends information is loaded on demand when you call the All or Get method.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.GamePlayers">
            <summary>
            Gets an object that can be used to manipulate game players for the user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.GetCheckInsAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of user checkins.</param>
            <param name="afterDate">Filter the list to return only check-in after a date.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a list of user check-in locations.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.GetPictureAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the picture if found, null otherwise.</param>
            <param name="pictureId">The id of the picture to retrieve.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Retrieve a picture by its unique ID. Any picture that the user owns or is publicly available can be retrieved.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.IdentityValues">
            <summary>
            Gets the collection of identity values for the user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.LocationFuzzing">
            <summary>
            Gets whether location fuzzing is enabled. When enabled any reported locations for this user will be randomized for a few miles. This is a security feature
            that makes it difficult for users to track each other.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.Messages">
            <summary>
            Gets an object that can be used to send or receive messages, create message groups, etc.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.Metadata">
            <summary>
            Gets the collection of user metadata. Note that the actual metadata is loaded on demand when you call the All or Get method.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.PhotoAlbums">
            <summary>
            Gets the collection of photo albums for this user. Note that the actual album information is loaded on demand when you call the All or Get method.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.Places">
            <summary>
            Gets an object that can be user for search for locations around the user (places, not other users).
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.PushNotifications">
            <summary>
            Gets an object that can be used to register a device for push notifications, send notifications or query the state of devices and groups.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.SearchForAlbumsAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of public albums.</param>
            <param name="searchDistanceInMeters">Optionally search only within a certain distance from the supplied lat/long.</param>
            <param name="latitude">Optionally search for photos added near a latitude.</param>
            <param name="longitude">Optionally search for photos added near a longitude.</param>
            <param name="limitResults">Optionally limit the number of returned photos. Note that this parameter limits the photos returned, not albums. It's possible
            that a partial album is returned.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Search for public albums from other users.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.SetProfilePhotoAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="picture">The photo to set as the "active" profile photo.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Set a new "active" profile photo from the list of profile photos that the user has uploaded. The photo needs to be already uploaded.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.Startups">
            <summary>
            Gets an object that can be used for search for startups around the user (startups, not other users).
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.Token">
            <summary>
            Gets the unique user token that is the secret used to log-in this user. Each user has a unique ID, a secret user token and a user/pass combination.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.UpdateAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the update was successful, false otherwise.</param>
            <param name="name">Optional new name for the user, can't be null or empty.</param>
            <param name="password">Optional new password for the user, can't be null.</param>
            <param name="gender">Optional new gender for the user.</param>
            <param name="age">Optional new age for the user.</param>
            <param name="email">Optional new email for the user.</param>
            <param name="status">Optional new status for the user.</param>
            <param name="fuzzLocation">Optional change in location fuzzing for this user. If location fuzzing is enable, user location will be 
            randomized in all searches by other users.</param>
            <param name="celebrityMode">Optional change in celebrity mode for this user. If celebrity mode is enabled the user will be hidden from all searches in the system.</param>
            <param name="appTag">Optional update to the custom application tag for this user.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Update the profile of this user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUser.VirtualAlbums">
            <summary>
            Gets the collection of virtual albums for this users. All virtual albums are owned by a single user, however any user may add existing photos to the album. Only the owner of the virtual album can delete the album.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUserTaskWrappers.AddProfilePhotoAsync">
            <param name="authenticatedUser">To be added.</param>
            <param name="photoSteam">An array of bytes that represent the image you are adding.</param>
            <param name="appTag">An optional tag for the photo.</param>
            <summary>
            Add a profile photo for this user.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUserTaskWrappers.CheckInAsync">
            <param name="authenticatedUser">To be added.</param>
            <param name="latitude">The latitude of the location.</param>
            <param name="longitude">The longitude of the location.</param>
            <param name="comment">An optional comment for the check-in.</param>
            <param name="appTag">An optional application specific tag for the location.</param>
            <summary>
            Check-in the user at a location.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUserTaskWrappers.DeleteAsync">
            <param name="authenticatedUser">To be added.</param>
            <summary>
            Delete this user.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUserTaskWrappers.DeleteProfilePhotoAsync">
            <param name="authenticatedUser">To be added.</param>
            <param name="picture">The photo to delete.</param>
            <summary>
            Delete a profile photo for this user. You can use the GetProfilePhotosAsync method to retrieve all the profile photos.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUserTaskWrappers.FindUserAsync">
            <param name="authenticatedUser">To be added.</param>
            <param name="id">The ID of the user, must be bigger than 0.</param>
            <summary>
            Find the public profile of a user from their unique User ID. This method can be used to find any user associated with this Application.
            </summary>
            <returns>A Task&lt;User&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
            <exception cref="T:Buddy.BuddyServiceException">With value: InvalidUserId, when the user ID doesn't exist in the system.</exception>
        </member>
        <member name="Buddy.AuthenticatedUserTaskWrappers.FindUserAsync">
            <param name="authenticatedUser">To be added.</param>
            <param name="latitude">The latitude of the position to search from. Must be a value between -90.0 and 90.0.</param>
            <param name="longitude">The Longitude of the position to search from. Must be a value between -180.0 and 180.0.</param>
            <param name="searchDistance">The distance in meters from the specified latitude/longitude to search for results. To ignore this distance pass in 40075000 (the circumferance of the earth).</param>
            <param name="recordLimit">The maximum number of users to return with this search.</param>
            <param name="gender">The gender of the users, use UserGender.Any to search for both.</param>
            <param name="ageStart">Specifies the starting age for the range of ages to search in. The value must be &gt;= 0.</param>
            <param name="ageStop">Specifies the ending age for the range of ages to search in. The value must be &gt; ageStart.</param>
            <param name="status">The status of the users to search for. Use UserStatus.Any to ignore this parameter.</param>
            <param name="checkinsWithinMinutes">Filter for users who have checked-in in the past 'checkinsWithinMinutes' number of minutes.</param>
            <param name="appTag">Search for the custom appTag that was stored with the user.</param>
            <summary>
            Find the public profiles of all users that match the serch parameters.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;User&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
            <exception cref="T:System.ArgumentException">When latitude or longitude are incorrect.</exception>
        </member>
        <member name="Buddy.AuthenticatedUserTaskWrappers.GetCheckInsAsync">
            <param name="authenticatedUser">To be added.</param>
            <param name="afterDate">Filter the list to return only check-in after a date.</param>
            <summary>
            Get a list of user check-in locations.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;CheckInLocation&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUserTaskWrappers.GetPictureAsync">
            <param name="authenticatedUser">To be added.</param>
            <param name="pictureId">The id of the picture to retrieve.</param>
            <summary>
            Retrieve a picture by its unique ID. Any picture that the user owns or is publicly available can be retrieved.
            </summary>
            <returns>A Task&lt;Picture&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUserTaskWrappers.SearchForAlbumsAsync">
            <param name="authenticatedUser">To be added.</param>
            <param name="searchDistanceInMeters">Optionally search only within a certain distance from the supplied lat/long.</param>
            <param name="latitude">Optionally search for photos added near a latitude.</param>
            <param name="longitude">Optionally search for photos added near a longitude.</param>
            <param name="limitResults">Optionally limit the number of returned photos. Note that this parameter limits the photos returned, not albums. It's possible
            that a partial album is returned.</param>
            <summary>
            Search for public albums from other users.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;PhotoAlbumPublic&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUserTaskWrappers.SetProfilePhotoAsync">
            <param name="authenticatedUser">To be added.</param>
            <param name="picture">The photo to set as the "active" profile photo.</param>
            <summary>
            Set a new "active" profile photo from the list of profile photos that the user has uploaded. The photo needs to be already uploaded.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.AuthenticatedUserTaskWrappers.UpdateAsync">
            <param name="authenticatedUser">To be added.</param>
            <param name="name">Optional new name for the user, can't be null or empty.</param>
            <param name="password">Optional new password for the user, can't be null.</param>
            <param name="gender">Optional new gender for the user.</param>
            <param name="age">Optional new age for the user.</param>
            <param name="email">Optional new email for the user.</param>
            <param name="status">Optional new status for the user.</param>
            <param name="fuzzLocation">Optional change in location fuzzing for this user. If location fuzzing is enable, user location will be 
            randomized in all searches by other users.</param>
            <param name="celebrityMode">Optional change in celebrity mode for this user. If celebrity mode is enabled the user will be hidden from all searches in the system.</param>
            <param name="appTag">Optional update to the custom application tag for this user.</param>
            <summary>
            Update the profile of this user.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyBase..ctor">
            <param name="client">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyBase..ctor">
            <param name="client">To be added.</param>
            <param name="user">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyBase.AuthUser">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyBase.AuthUserRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyBase.Client">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyCallbackParams.AsyncResult">
            <summary>
            Gets the IAsyncResult structure for this async call.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyCallbackParams.Completed">
            <summary>
            Gets whether the call was successful or not.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyCallbackParams.Exception">
            <summary>
            Gets the exception in case there was an error while processing the callback.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyCallbackParams.State">
            <summary>
            Gets the user defined state object passed to the Async call.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient..ctor">
            <param name="appName">The name of the application to use with this client. Can't be null or empty.</param>
            <param name="appPassword">The password of the application to use with this client. Can't be null or empty.</param>
            <param name="appVersion">Optional string that describes the version of the app you are building. This string will then be used when uploading
            device information to buddy or submitting crash reports.</param>
            <param name="autoRecordDeviceInfo">If true automatically records the current device profile with the Buddy Service (device type, os version, etc.). Note that this
            only works for Windows Phone clients.</param>
            <summary>
            Initializes a new instance of the BuddyClient class. To get an application username and password, go to http://buddy.com, create a new
            developer account and create a new application.
            </summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.AppName">
            <summary>
            Gets the application name for this client.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.AppPassword">
            <summary>
            Gets the application password for this client.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.AppVersion">
            <summary>
            Gets the optional string that describes the version of the app you are building. This string is used when uploading
            device information to buddy or submitting crash reports. It will default to 1.0.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.CheckIfEmailExistsAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the email exists in the system, false otherwise.</param>
            <param name="email">The email to check for, can't be null or empty.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Check if another user with the same email already exists in the system.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.CheckIfUsernameExistsAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the name exists in the system, false otherwise.</param>
            <param name="username">The name to check for, can't be null or empty.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Check if another user with the same name already exists in the system.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.CreateUserAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is an AuthenticatedUser object is returned.</param>
            <param name="name">The name of the new user. Can't be null or empty.</param>
            <param name="password">The password of the new user. Can't be null.</param>
            <param name="gender">An optional gender for the user.</param>
            <param name="age">An optional age for the user.</param>
            <param name="email">An optional email for the user.</param>
            <param name="status">An optional status for the user.</param>
            <param name="fuzzLocation">Optionally set location fuzzing for this user. When enabled user location is randomized in searches.</param>
            <param name="celebrityMode">Optionally set the celebrity mode for this user. When enabled this user will be absent from all searches.</param>
            <param name="appTag">An optional custom tag for this user.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Create a new Buddy user. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.Device">
            <summary>
            Gets an object that can be used to record device information about this client or upload crashes.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.EndSessionAsync">
            <param name="callback">The callback to call upon success or error.  The first parameter a boolean which is true upon success.</param>
            <param name="user">The user that is starting this session</param>
            <param name="sessionId">The id of the session, returned from StartSessionAsync.</param>
            <param name="appTag">An optional custom tag to include with the session.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Ends an analytics session
            </summary>
            <returns />
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.GameBoards">
            <summary>
            Gets an object that can be used to retrieve high score rankings or search for game boards in this application.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.GetApplicationStatisticsAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the list of application stats.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            This method will return a list of statistics for the application covering items such as total users, photos, etc. 
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.GetServiceTimeAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the datetime of the Buddy web-service.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get the current Buddy web-service date/time.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.GetServiceVersionAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the version of the service.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get the current version of the service that is being used by this SDK.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.GetUserEmailsAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the list of emails.</param>
            <param name="fromRow">Used for paging, retrieve only records starting fromRow.</param>
            <param name="pageSize">Used for paginig, specify page size.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Gets a list of emails for all registered users for this app.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.GetUserProfilesAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the list of user profiles.</param>
            <param name="fromRow">Used for paging, retrieve only records starting fromRow.</param>
            <param name="pageSize">Used for paginig, specify page size.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Gets a list of all user profiles for this app.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.LoginAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a the authenticated user if the login was successful.</param>
            <param name="token">The private token of the user to login.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Login an existing user with their secret token. Each user is assigned a token on creation, you can store it instead of a
            username/password combination.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.LoginAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is an authenticated user if the Login was successful.</param>
            <param name="username">The username of the user. Can't be null or empty.</param>
            <param name="password">The password of the user. Can't be null.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Login an existing user with their username and password. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.Metadata">
            <summary>
            Gets an object that can be used to manipulate application-level metadata. Metadata is used to store custom values on the platform.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.PingAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a string "Pong" if this method was successful.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Ping the service.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.RecordSessionMetricAsync">
            <param name="callback">The callback to call upon success or error.  The first parameter a boolean which is true upon success.</param>
            <param name="user">The user that is starting this session</param>
            <param name="sessionId">The id of the session, returned from StartSessionAsync.</param>
            <param name="metricKey">A custom key describing the metric.</param>
            <param name="metricValue">The value to set.</param>
            <param name="appTag">An optional custom tag to include with the metric.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Records a session metric value
            </summary>
            <returns />
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClient.StartSessionAsync">
            <param name="callback">The callback to call upon success or error.  The first parameter is an identifier for the session.</param>
            <param name="user">The user that is starting this session</param>
            <param name="sessionName">The name of the session</param>
            <param name="appTag">An optional custom tag to include with the session.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Starts an analytics session
            </summary>
            <returns />
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClientTaskWrappers.CheckIfEmailExistsAsync">
            <param name="buddyClient">To be added.</param>
            <param name="email">The email to check for, can't be null or empty.</param>
            <summary>
            Check if another user with the same email already exists in the system.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClientTaskWrappers.CheckIfUsernameExistsAsync">
            <param name="buddyClient">To be added.</param>
            <param name="username">The name to check for, can't be null or empty.</param>
            <summary>
            Check if another user with the same name already exists in the system.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClientTaskWrappers.CreateUserAsync">
            <param name="buddyClient">To be added.</param>
            <param name="name">The name of the new user. Can't be null or empty.</param>
            <param name="password">The password of the new user. Can't be null.</param>
            <param name="gender">An optional gender for the user.</param>
            <param name="age">An optional age for the user.</param>
            <param name="email">An optional email for the user.</param>
            <param name="status">An optional status for the user.</param>
            <param name="fuzzLocation">Optionally set location fuzzing for this user. When enabled user location is randomized in searches.</param>
            <param name="celebrityMode">Optionally set the celebrity mode for this user. When enabled this user will be absent from all searches.</param>
            <param name="appTag">An optional custom tag for this user.</param>
            <summary>
            Create a new Buddy user. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>A Task&lt;AuthenticatedUser&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClientTaskWrappers.EndSessionAsync">
            <param name="buddyClient">To be added.</param>
            <param name="user">The user that is starting this session</param>
            <param name="sessionId">The id of the session, returned from StartSessionAsync.</param>
            <param name="appTag">An optional custom tag to include with the session.</param>
            <summary>
            Ends an analytics session
            </summary>
            <returns />
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClientTaskWrappers.GetApplicationStatisticsAsync">
            <param name="buddyClient">To be added.</param>
            <summary>
            This method will return a list of statistics for the application covering items such as total users, photos, etc. 
            </summary>
            <returns>A Task&lt;IEnumerable&lt;ApplicationStatistics&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClientTaskWrappers.GetServiceTimeAsync">
            <param name="buddyClient">To be added.</param>
            <summary>
            Get the current Buddy web-service date/time.
            </summary>
            <returns>A Task&lt;DateTime&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClientTaskWrappers.GetServiceVersionAsync">
            <param name="buddyClient">To be added.</param>
            <summary>
            Get the current version of the service that is being used by this SDK.
            </summary>
            <returns>A Task&lt;String&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClientTaskWrappers.GetUserEmailsAsync">
            <param name="buddyClient">To be added.</param>
            <param name="fromRow">Used for paging, retrieve only records starting fromRow.</param>
            <param name="pageSize">Used for paginig, specify page size.</param>
            <summary>
            Gets a list of emails for all registered users for this app.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;String&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClientTaskWrappers.GetUserProfilesAsync">
            <param name="buddyClient">To be added.</param>
            <param name="fromRow">Used for paging, retrieve only records starting fromRow.</param>
            <param name="pageSize">Used for paginig, specify page size.</param>
            <summary>
            Gets a list of all user profiles for this app.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;User&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClientTaskWrappers.LoginAsync">
            <param name="buddyClient">To be added.</param>
            <param name="token">The private token of the user to login.</param>
            <summary>
            Login an existing user with their secret token. Each user is assigned a token on creation, you can store it instead of a
            username/password combination.
            </summary>
            <returns>A Task&lt;AuthenticatedUser&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClientTaskWrappers.LoginAsync">
            <param name="buddyClient">To be added.</param>
            <param name="username">The username of the user. Can't be null or empty.</param>
            <param name="password">The password of the user. Can't be null.</param>
            <summary>
            Login an existing user with their username and password. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>A Task&lt;AuthenticatedUser&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClientTaskWrappers.PingAsync">
            <param name="buddyClient">To be added.</param>
            <summary>
            Ping the service.
            </summary>
            <returns>A Task&lt;String&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClientTaskWrappers.RecordSessionMetricAsync">
            <param name="buddyClient">To be added.</param>
            <param name="user">The user that is starting this session</param>
            <param name="sessionId">The id of the session, returned from StartSessionAsync.</param>
            <param name="metricKey">A custom key describing the metric.</param>
            <param name="metricValue">The value to set.</param>
            <param name="appTag">An optional custom tag to include with the metric.</param>
            <summary>
            Records a session metric value
            </summary>
            <returns />
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyClientTaskWrappers.StartSessionAsync">
            <param name="buddyClient">To be added.</param>
            <param name="user">The user that is starting this session</param>
            <param name="sessionName">The name of the session</param>
            <param name="appTag">An optional custom tag to include with the session.</param>
            <summary>
            Starts an analytics session
            </summary>
            <returns />
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.BuddyServiceException.Error">
            <summary>
            The error that occured.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.CheckInLocation.AppTag">
            <summary>
            Gets the application tag associated with this check-in.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.CheckInLocation.CheckInDate">
            <summary>
            Gets the datetime of the check-in.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.CheckInLocation.Comment">
            <summary>
            Gets the comment associated with this check-in.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.CheckInLocation.Latitude">
            <summary>
            Gets the latitude of the check-in location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.CheckInLocation.Longitude">
            <summary>
            Gets the longitude of the check-in location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.CheckInLocation.PlaceName">
            <summary>
            Gets the name of the place where the check-in happend.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Commerce.AuthUserRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Commerce.GetActiveStoreItemsAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a .NET List of StoreItems if this method was successful.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Returns information about all store items for an application which are currently active (available for sale).
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Commerce.GetAllStoreItemsAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a .NET List of StoreItems if this method was successful.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Returns information about all items in the store for the current application.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Commerce.GetFreeStoreItemsAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a .NET List of StoreItems if this method was successful.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
             Returns information about all items in the store for the current application which are marked as free.
             </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Commerce.GetReceiptForUserAndTransactionIDAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is .NET List of Receipts if this method was successful.</param>
            <param name="customTransactionID">The CustomTransactionID of the transaction. For Facebook payments this is the OrderID of the transaction.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Finds the receipt associated with the specified CustomTransactionID for the currently logged in user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Commerce.GetReceiptsForUserAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is .NET List of Receipts if this method was successful.</param>
            <param name="fromDateTime">The starting date and time to get receipts from, leave this blank to get all the receipts.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Finds the receipt list based on the FromDateTime parameter for the currently logged in user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Commerce.SaveReceiptAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if successful, false otherwise.</param>
            <param name="totalCost">The total cost for the items purchased in the transaction.</param>
            <param name="totalQuantity">The total number of items purchased.</param>
            <param name="storeItemID">The store ID of the item of the item being purchased.</param>
            <param name="storeName">The name of the application's store to be saved with the transaction. This field is used by the commerce analytics to track purchases.</param>
            <param name="receiptData">Optional information to store with the receipt such as notes about the transaction.</param>
            <param name="customTransactionID">An optional app-specific ID to associate with the purchase.</param>
            <param name="appData">Optional metadata to associate with the transaction.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Saves a receipt for the purchase of an item made to the application's store.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Commerce.VerifyAndSaveiOSReceiptAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if successful, false otherwise.</param>
            <param name="totalCost">The total cost for the items purchased in the transaction.</param>
            <param name="totalQuantity">The total number of items purchased.</param>
            <param name="useSandbox">Set to true when testing this function in a "sandbox" to execute this call against the Apple sandbox server, or false to have the call executed against the production Apple server.</param>
            <param name="appleItemID">The optional ID associated with the item as assigned by Apple.</param>
            <param name="receiptData">Optional information to store with the receipt such as notes about the transaction.</param>
            <param name="customTransactionID">An optional app-specific ID to associate with the purchase.</param>
            <param name="appData">Optional metadata to associated with the transaction.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Verifies that a receipt received from the Apple store is actually from Apple and stores a copy of the receipt on Buddy's servers.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Commerce.VerifyiOSReceiptAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if successful, false otherwise.</param>
            <param name="totalCost">The total cost for the items purchased in the transaction.</param>
            <param name="totalQuantity">The total number of items purchased.</param>
            <param name="useSandbox">Set to true when testing this function in a "sandbox" to execute this call against the Apple sandbox server, or false to have the call executed against the production Apple server.</param>
            <param name="appleItemID">The optional ID associated with the item as assigned by Apple.</param>
            <param name="receiptData">Optional information to store with the receipt such as notes about the transaction.</param>
            <param name="customTransactionID">An optional app-specific ID to associate with the purchase.</param>
            <param name="appData">Optional metadata to associated with the transaction.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Verifies that a receipt received from the Apple store is actually from Apple.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.CommerceTaskWrappers.GetActiveStoreItemsAsync">
            <param name="commerce">To be added.</param>
            <summary>
            Returns information about all store items for an application which are currently active (available for sale).
            </summary>
            <returns>A Task&lt;IEnumerable&lt;StoreItem&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.CommerceTaskWrappers.GetAllStoreItemsAsync">
            <param name="commerce">To be added.</param>
            <summary>
            Returns information about all items in the store for the current application.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;StoreItem&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.CommerceTaskWrappers.GetFreeStoreItemsAsync">
            <param name="commerce">To be added.</param>
            <summary>
            Returns information about all items in the store for the current application which are marked as free.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;StoreItem&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.CommerceTaskWrappers.GetReceiptForUserAndTransactionIDAsync">
            <param name="commerce">To be added.</param>
            <param name="customTransactionID">The CustomTransactionID of the transaction. For Facebook payments this is the OrderID of the transaction.</param>
            <summary>
            Finds the receipt associated with the specified CustomTransactionID for the currently logged in user.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;Receipt&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.CommerceTaskWrappers.GetReceiptsForUserAsync">
            <param name="commerce">To be added.</param>
            <param name="fromDateTime">The starting date and time to get receipts from, leave this blank to get all the receipts.</param>
            <summary>
            Finds the receipt list based on the FromDateTime parameter for the currently logged in user.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;Receipt&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.CommerceTaskWrappers.SaveReceiptAsync">
            <param name="commerce">To be added.</param>
            <param name="totalCost">The total cost for the items purchased in the transaction.</param>
            <param name="totalQuantity">The total number of items purchased.</param>
            <param name="storeItemID">The store ID of the item of the item being purchased.</param>
            <param name="storeName">The name of the application's store to be saved with the transaction. This field is used by the commerce analytics to track purchases.</param>
            <param name="receiptData">Optional information to store with the receipt such as notes about the transaction.</param>
            <param name="customTransactionID">An optional app-specific ID to associate with the purchase.</param>
            <param name="appData">Optional metadata to associate with the transaction.</param>
            <summary>
            Saves a receipt for the purchase of an item made to the application's store.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.CommerceTaskWrappers.VerifyAndSaveiOSReceiptAsync">
            <param name="commerce">To be added.</param>
            <param name="totalCost">The total cost for the items purchased in the transaction.</param>
            <param name="totalQuantity">The total number of items purchased.</param>
            <param name="useSandbox">Set to true when testing this function in a "sandbox" to execute this call against the Apple sandbox server, or false to have the call executed against the production Apple server.</param>
            <param name="appleItemID">The optional ID associated with the item as assigned by Apple.</param>
            <param name="receiptData">Optional information to store with the receipt such as notes about the transaction.</param>
            <param name="customTransactionID">An optional app-specific ID to associate with the purchase.</param>
            <param name="appData">Optional metadata to associated with the transaction.</param>
            <summary>
            Verifies that a receipt received from the Apple store is actually from Apple and stores a copy of the receipt on Buddy's servers.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.CommerceTaskWrappers.VerifyiOSReceiptAsync">
            <param name="commerce">To be added.</param>
            <param name="totalCost">The total cost for the items purchased in the transaction.</param>
            <param name="totalQuantity">The total number of items purchased.</param>
            <param name="useSandbox">Set to true when testing this function in a "sandbox" to execute this call against the Apple sandbox server, or false to have the call executed against the production Apple server.</param>
            <param name="appleItemID">The optional ID associated with the item as assigned by Apple.</param>
            <param name="receiptData">Optional information to store with the receipt such as notes about the transaction.</param>
            <param name="customTransactionID">An optional app-specific ID to associate with the purchase.</param>
            <param name="appData">Optional metadata to associated with the transaction.</param>
            <summary>
            Verifies that a receipt received from the Apple store is actually from Apple.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Device.AuthUserRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Device.RecordCrashAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="methodName">The method name or location where the error happend. This could also be a descriptive string of the error.</param>
            <param name="osVersion">The OS version of the device runnign this code. On some .NET platforms you can use System.Environment.OSVersion to get this information.</param>
            <param name="deviceType">The type of device running this app. On Windows Phone 7 for example you can use DeviceExtendedProperties to retrieve this information.</param>
            <param name="user">The user that's registering this device information.</param>
            <param name="stackTrace">The optional stack trace of where the error happened.</param>
            <param name="appVersion">The optional version of this application.</param>
            <param name="latitude">The optional latitude where this report was submitted.</param>
            <param name="longitude">The optional longiture where this report was submitted.</param>
            <param name="metadata">An optional application specific metadata string to include with the report.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Record runtime crash information for this app. This could be exceptions, errors or your own custom crash information.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Device.RecordInformationAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="osVersion">The OS version of the device runnign this code. On some .NET platforms you can use System.Environment.OSVersion to get this information.</param>
            <param name="deviceType">The type of device running this app. On Windows Phone 7 for example you can use DeviceExtendedProperties to retrieve this information.</param>
            <param name="user">The user that's registering this device information.</param>
            <param name="appVersion">The optional version of this application.</param>
            <param name="latitude">The optional latitude where this report was submitted.</param>
            <param name="longitude">The optional longiture where this report was submitted.</param>
            <param name="metadata">An optional application specific metadata string to include with the report.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Record runtine device type information. This info will be uploaded to the Buddy service and can later be used for analytics purposes.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.DeviceTaskWrappers.RecordCrashAsync">
            <param name="device">To be added.</param>
            <param name="methodName">The method name or location where the error happend. This could also be a descriptive string of the error.</param>
            <param name="osVersion">The OS version of the device runnign this code. On some .NET platforms you can use System.Environment.OSVersion to get this information.</param>
            <param name="deviceType">The type of device running this app. On Windows Phone 7 for example you can use DeviceExtendedProperties to retrieve this information.</param>
            <param name="user">The user that's registering this device information.</param>
            <param name="stackTrace">The optional stack trace of where the error happened.</param>
            <param name="appVersion">The optional version of this application.</param>
            <param name="latitude">The optional latitude where this report was submitted.</param>
            <param name="longitude">The optional longiture where this report was submitted.</param>
            <param name="metadata">An optional application specific metadata string to include with the report.</param>
            <summary>
            Record runtime crash information for this app. This could be exceptions, errors or your own custom crash information.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.DeviceTaskWrappers.RecordInformationAsync">
            <param name="device">To be added.</param>
            <param name="osVersion">The OS version of the device runnign this code. On some .NET platforms you can use System.Environment.OSVersion to get this information.</param>
            <param name="deviceType">The type of device running this app. On Windows Phone 7 for example you can use DeviceExtendedProperties to retrieve this information.</param>
            <param name="user">The user that's registering this device information.</param>
            <param name="appVersion">The optional version of this application.</param>
            <param name="latitude">The optional latitude where this report was submitted.</param>
            <param name="longitude">The optional longiture where this report was submitted.</param>
            <param name="metadata">An optional application specific metadata string to include with the report.</param>
            <summary>
            Record runtine device type information. This info will be uploaded to the Buddy service and can later be used for analytics purposes.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.FriendRequests.AcceptAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the friend request was accepted, false otherwise (i.e. the user doesn't exist).</param>
            <param name="user">The user to accept as friend. Can't be null and must be on the friend requests list.</param>
            <param name="appTag">Tag this friend accept with a string.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Accept a friend request from a user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.FriendRequests.AddAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the friend request was added, false otherwise.</param>
            <param name="user">The user to send the request to, can't be null.</param>
            <param name="appTag">Mark this request with an tag, can be used on the user's side to make a decision on whether to accept the request.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Add a friend request to a user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.FriendRequests.AuthUserRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.FriendRequests.DenyAsync">
            <param name="callback">The async callback to call on success or error. First parameter is true if the friend request was accepted, 
            false otherwise (i.e. user is not on the friends request list).</param>
            <param name="user">The user to deny the friend request from. User can't be null and must be on the friend request list.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Deny the friend request from a user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.FriendRequests.GetAllAsync">
            <param name="callback">The async callback to call on success or error. The first paramater is a list of users that have pending friend requests.</param>
            <param name="afterDate">Filter the list by returning only the friend requests after a ceratin date.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            A list of all users that have request to be friends with this user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.FriendRequestsTaskWrappers.AcceptAsync">
            <param name="friendRequests">To be added.</param>
            <param name="user">The user to accept as friend. Can't be null and must be on the friend requests list.</param>
            <param name="appTag">Tag this friend accept with a string.</param>
            <summary>
            Accept a friend request from a user.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.FriendRequestsTaskWrappers.AddAsync">
            <param name="friendRequests">To be added.</param>
            <param name="user">The user to send the request to, can't be null.</param>
            <param name="appTag">Mark this request with an tag, can be used on the user's side to make a decision on whether to accept the request.</param>
            <summary>
            Add a friend request to a user.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.FriendRequestsTaskWrappers.DenyAsync">
            <param name="friendRequests">To be added.</param>
            <param name="user">The user to deny the friend request from. User can't be null and must be on the friend request list.</param>
            <summary>
            Deny the friend request from a user.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.FriendRequestsTaskWrappers.GetAllAsync">
            <param name="friendRequests">To be added.</param>
            <param name="afterDate">Filter the list by returning only the friend requests after a ceratin date.</param>
            <summary>
            A list of all users that have request to be friends with this user.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;User&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Friends.AuthUserRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Friends.GetAllAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of users.</param>
            <param name="afterDate">Filter the list by friends added 'afterDate'.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Returns the list of friends for the user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Friends.RemoveAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the user was remove from the list, false otherwise.</param>
            <param name="user">The user to remove from the friends list. Must be already on the list and can't be null.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Remove a user from the current list of friends.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Friends.Requests">
            <summary>
            Gets a list of friend requests that are still pending for this user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.FriendsTaskWrappers.GetAllAsync">
            <param name="friends">To be added.</param>
            <param name="afterDate">Filter the list by friends added 'afterDate'.</param>
            <summary>
            Returns the list of friends for the user.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;User&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.FriendsTaskWrappers.RemoveAsync">
            <param name="friends">To be added.</param>
            <param name="user">The user to remove from the friends list. Must be already on the list and can't be null.</param>
            <summary>
            Remove a user from the current list of friends.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameBoards.FindScoresAsync">
            <param name="user">Optionally limit the search to a spcific user.</param>
            <param name="distanceInMeters">Optionally specify a distance from a lat/long to search on. By default this is ignored.</param>
            <param name="latitude">Optional latitude where we can start the search.</param>
            <param name="longitude">Optional longitude where we can start the search.</param>
            <param name="recordLimit">Optionally limit the number of records returned by this search.</param>
            <param name="boardName">Optionally filter on a specific board name.</param>
            <param name="daysOld">Optionally only return scores that are X number of days old.</param>
            <param name="minimumScore">Optionally only return scores that are above a certain minimum score.</param>
            <param name="appTag">Optionally return only scores that have a certain app tag.</param>
            <summary>
            Search for game scores based on a number of different parameters.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;GameScore&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameBoards.FindScoresAsync">
            <param name="callback">The callback to call when this method completes. The first parameter is a list of game scores.</param>
            <param name="user">Optionally limit the search to a spcific user.</param>
            <param name="distanceInMeters">Optionally specify a distance from a lat/long to search on. By default this is ignored.</param>
            <param name="latitude">Optional latitude where we can start the search.</param>
            <param name="longitude">Optional longitude where we can start the search.</param>
            <param name="recordLimit">Optionally limit the number of records returned by this search.</param>
            <param name="boardName">Optionally filter on a specific board name.</param>
            <param name="daysOld">Optionally only return scores that are X number of days old.</param>
            <param name="minimumScore">Optionally only return scores that are above a certain minimum score.</param>
            <param name="appTag">Optionally return only scores that have a certain app tag.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Search for game scores based on a number of different parameters.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameBoards.GetHighScoresAsync">
            <param name="boardName">The board name can be a specific string or a 'LIKE' pattern using %.</param>
            <param name="recordLimit">The maximum number of scores to return.</param>
            <summary>
            Gets a list of high scores for a specific game board.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;GameScore&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameBoards.GetHighScoresAsync">
            <param name="callback">The callback to call when this method completes. The first parameter is a list of game scores.</param>
            <param name="boardName">The board name can be a specific string or a 'LIKE' pattern using %.</param>
            <param name="recordLimit">The maximum number of scores to return.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Gets a list of high scores for a specific game board.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameBoards.GetLowScoresAsync">
            <param name="boardName">The board name can be a specific string or a 'LIKE' pattern using %.</param>
            <param name="recordLimit">The maximum number of scores to return.</param>
            <summary>
            Gets a list of lowest scores for a specific game board.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;GameScore&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayer.ApplicationTag">
            <summary>
            Gets the optional application tag for the player.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayer.BoardName">
            <summary>
            Gets the name of the board the player belongs to.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayer.CreatedOn">
            <summary>
            Gets the date the player was created.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayer.DistanceInKilometers">
            <summary>
            Gets the distance in kilo-meters from the given origin in the Metadata Search method.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayer.DistanceInMeters">
            <summary>
            Gets the distance in meters from the given origin in the Metadata Search method.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayer.DistanceInMiles">
            <summary>
            Gets the distance in miles from the given origin in the Metadata Search method.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayer.DistanceInYards">
            <summary>
            Gets the distance in yards from the given origin in the Metadata Search method.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayer.Latitude">
            <summary>
            Gets the latitude where the player was created.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayer.Longitude">
            <summary>
            Gets the longitude where the player was created.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayer.Name">
            <summary>
            Gets the name of the player.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayer.Rank">
            <summary />
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayer.UserID">
            <summary>
            Gets the UserID of the user this player is tied to.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayers.AddAsync">
            <param name="name">The name of the new player.</param>
            <param name="board">An optional name of a "Board" for the game. Used for grouping scores together either by user group, levels, or some other method relevant to the game. Although optional, a value is recommended such as "Default" for use in later searches of scores. If no board is to be stored, then pass in null or leave empty.</param>
            <param name="rank">An optional ranking to associate with the score. Can be any string ie: descriptions of achievements, ranking strings like "excellent", etc. Pass in null or an empty string if you do not wish to store a rank</param>
            <param name="latitude">The latitude of the location where the Player object is being created.</param>
            <param name="longitude">The longitude of the location where the Player object is being created.</param>
            <param name="appTag">Optional metadata to store with the Player object. ie: a list of players, game state, etc. Leave empty or set to null if there is no data to store with the score.</param>
            <summary>
            Creates a new game Player object for an existing user in Buddy.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayers.AddAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="name">The name of the new player.</param>
            <param name="board">An optional name of a "Board" for the game. Used for grouping scores together either by user group, levels, or some other method relevant to the game. Although optional, a value is recommended such as "Default" for use in later searches of scores. If no board is to be stored, then pass in null or leave empty.</param>
            <param name="rank">An optional ranking to associate with the score. Can be any string ie: descriptions of achievements, ranking strings like "excellent", etc. Pass in null or an empty string if you do not wish to store a rank</param>
            <param name="latitude">The latitude of the location where the Player object is being created.</param>
            <param name="longitude">The longitude of the location where the Player object is being created.</param>
            <param name="appTag">Optional metadata to store with the Player object. ie: a list of players, game state, etc. Leave empty or set to null if there is no data to store with the score.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Creates a new game Player object for an existing user in Buddy.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayers.DeleteAsync">
            <summary>
            Delete the player object for this user.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayers.DeleteAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Delete the player object for this user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayers.FindAsync">
            <param name="searchDistanceInMeters">The radius (in meters) around the specified location in which to look for locations. Pass in -1 to ignore this field.  </param>
            <param name="latitude">The latitude of the location around which to search for locations within the specified SearchDistance.   </param>
            <param name="longitude">The longitude of the location around which to search for locations within the specified SearchDistance. </param>
            <param name="recordLimit">The maximum number of search results to return or -1 to return all search results.    </param>
            <param name="boardName">Searches for scores which contain the specified board. Leave empty or pass in null if no board filter is to be used.    </param>
            <param name="onlyForLastNumberOfDays">The number of days into the past for which to look for scores. ie: passing in 5 will filter scores to include those which were added/updated on or after 5 days ago. Pass in -1 to ignore this filter.    </param>
            <param name="minimumScore">The minimum score value to search for. Pass in -1 to ignore this filter. </param>
            <param name="appTag">Searches for scores with the specified ApplicationTag stored with them. Leave empty or pass in null to ignore this filter. </param>
            <param name="rank">Optionally search for a player rank.</param>
            <summary>
            Searches for Player objects stored in the Buddy system. Searches can optionally be performed based on location.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;GamePlayer&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayers.FindAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of player that were found.</param>
            <param name="searchDistanceInMeters">The radius (in meters) around the specified location in which to look for locations. Pass in -1 to ignore this field.  </param>
            <param name="latitude">The latitude of the location around which to search for locations within the specified SearchDistance.   </param>
            <param name="longitude">The longitude of the location around which to search for locations within the specified SearchDistance. </param>
            <param name="recordLimit">The maximum number of search results to return or -1 to return all search results.    </param>
            <param name="boardName">Searches for scores which contain the specified board. Leave empty or pass in null if no board filter is to be used.    </param>
            <param name="onlyForLastNumberOfDays">The number of days into the past for which to look for scores. ie: passing in 5 will filter scores to include those which were added/updated on or after 5 days ago. Pass in -1 to ignore this filter.    </param>
            <param name="minimumScore">The minimum score value to search for. Pass in -1 to ignore this filter. </param>
            <param name="appTag">Searches for scores with the specified ApplicationTag stored with them. Leave empty or pass in null to ignore this filter. </param>
            <param name="rank">Optionally search for a player rank.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Searches for Player objects stored in the Buddy system. Searches can optionally be performed based on location.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayers.GetInfoAsync">
            <summary>
            Get all the player info for this user.
            </summary>
            <returns>A Task&lt;GamePlayer&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayers.GetInfoAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the player info for this user.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get all the player info for this user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayers.UpdateAsync">
            <param name="name">The name of the new player.</param>
            <param name="board">An optional name of a "Board" for the game. Used for grouping scores together either by user group, levels, or some other method relevant to the game. Although optional, a value is recommended such as "Default" for use in later searches of scores. If no board is to be stored, then pass in null or leave empty.</param>
            <param name="rank">An optional ranking to associate with the score. Can be any string ie: descriptions of achievements, ranking strings like "excellent", etc. Pass in null or an empty string if you do not wish to store a rank</param>
            <param name="latitude">The latitude of the location where the Player object is being updated.</param>
            <param name="longitude">The longitude of the location where the Player object is being updated. </param>
            <param name="appTag">Optional metadata to store with the Player object. ie: a list of players, game state, etc. Leave empty or set to null if there is no data to store with the score.</param>
            <summary>
            Updates one or more fields of an existing Player object which was previously created.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GamePlayers.UpdateAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="name">The name of the new player.</param>
            <param name="board">An optional name of a "Board" for the game. Used for grouping scores together either by user group, levels, or some other method relevant to the game. Although optional, a value is recommended such as "Default" for use in later searches of scores. If no board is to be stored, then pass in null or leave empty.</param>
            <param name="rank">An optional ranking to associate with the score. Can be any string ie: descriptions of achievements, ranking strings like "excellent", etc. Pass in null or an empty string if you do not wish to store a rank</param>
            <param name="latitude">The latitude of the location where the Player object is being updated.</param>
            <param name="longitude">The longitude of the location where the Player object is being updated. </param>
            <param name="appTag">Optional metadata to store with the Player object. ie: a list of players, game state, etc. Leave empty or set to null if there is no data to store with the score.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Updates one or more fields of an existing Player object which was previously created.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScore.AddedOn">
            <summary>
            Gets the date this score was added.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScore.AppTag">
            <summary>
            Gets the optional application tag for this score.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScore.BoardName">
            <summary>
            Gets the name of the board this score is related to.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScore.Latitude">
            <summary>
            Gets the optional latitude for this score.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScore.Longitude">
            <summary>
            Gets the optional longitude for this score.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScore.Rank">
            <summary>
            Gets the optioanl rank value for this score.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScore.Score">
            <summary>
            Gets the numeric value of the score entry.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScore.UserID">
            <summary>
            Gets the user ID that owns this score.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScore.UserName">
            <summary>
            Gets the user name of the user who owns this score.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScores.AddAsync">
            <param name="callback">The callback to call when this method completes. The first parameter is true on success, false otherwise.</param>
            <param name="score">The numeric value of the score.</param>
            <param name="board">The optional name of the game board.</param>
            <param name="rank">The optional rank for this score. This can be used for adding badges, achievements, etc.</param>
            <param name="latitude">The optional latitude for this score.</param>
            <param name="longitude">The optional longitude for this score.</param>
            <param name="oneScorePerPlayer">The optional one-score-per-player paramter. Setting this to true will always update the score for this user, instead of creating a new one.</param>
            <param name="appTag">An optional application tag for this score.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Add a new score for this user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScores.DeleteAllAsync">
            <param name="callback">The callback to call when this method completes. The first parameter is true on success, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Delete all scores for this user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScores.GetAllAsync">
            <param name="callback">The callback to call when this method completes. The first parameter is a list of game score entries.</param>
            <param name="recordLimit">Limit the number of entries returned.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Return all score entries for this user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScores.User">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScoresTaskWrappers.AddAsync">
            <param name="gameScores">To be added.</param>
            <param name="score">The numeric value of the score.</param>
            <param name="board">The optional name of the game board.</param>
            <param name="rank">The optional rank for this score. This can be used for adding badges, achievements, etc.</param>
            <param name="latitude">The optional latitude for this score.</param>
            <param name="longitude">The optional longitude for this score.</param>
            <param name="oneScorePerPlayer">The optional one-score-per-player paramter. Setting this to true will always update the score for this user, instead of creating a new one.</param>
            <param name="appTag">An optional application tag for this score.</param>
            <summary>
            Add a new score for this user.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScoresTaskWrappers.DeleteAllAsync">
            <param name="gameScores">To be added.</param>
            <summary>
            Delete all scores for this user.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameScoresTaskWrappers.GetAllAsync">
            <param name="gameScores">To be added.</param>
            <param name="recordLimit">Limit the number of entries returned.</param>
            <summary>
            Return all score entries for this user.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;GameScore&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameState.AddedOn">
            <summary>
            Gets the date this GameState was created.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameState.AppTag">
            <summary>
            Gets the optional application tag for this GameState.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameState.Key">
            <summary>
            Get the Key for this GameState object.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameState.Value">
            <summary>
            Gets the the value for this GameState object
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameStates.AddAsync">
            <param name="callback">The callback to call when this method completes. The first parameter is true on success, false otherwise.</param>
            <param name="gameStateKey">The game state key.</param>
            <param name="gameStateValue">The value to persist.</param>
            <param name="appTag">An optional application tag for this score.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Adds a key/value pair to the User GameState.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameStates.AuthUserRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameStates.GetAllAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a Dictionary of name/value pairs for this User's GameState.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get all GameState keys and values.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameStates.GetAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the state value or null if it doesn't exist.</param>
            <param name="gameStateKey">The gameStateKey to use to reference the GameState item.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a GameState item with a key. The key can't be null or an empty string.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
            <exception cref="T:System.ArgumentException">When key is null or empty.</exception>
        </member>
        <member name="Buddy.GameStates.RemoveAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="gameStateKey">The key to remove from the GameState.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Remove a GameState key.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameStates.UpdateAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="gameStateKey">The key to update.</param>
            <param name="gameStateValue">The value to update.</param>
            <param name="newAppTag">An optional new application tag for the value.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Update a GameState value.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameStates.User">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameStatesTaskWrappers.AddAsync">
            <param name="gameStates">To be added.</param>
            <param name="gameStateKey">The game state key.</param>
            <param name="gameStateValue">The value to persist.</param>
            <param name="appTag">An optional application tag for this score.</param>
            <summary>
            Adds a key/value pair to the User GameState.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameStatesTaskWrappers.GetAllAsync">
            <param name="gameStates">To be added.</param>
            <summary>
            Get all GameState keys and values.
            </summary>
            <returns>A Task&lt;IDictionary&lt;String,GameState&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameStatesTaskWrappers.GetAsync">
            <param name="gameStates">To be added.</param>
            <param name="gameStateKey">The gameStateKey to use to reference the GameState item.</param>
            <summary>
            Get a GameState item with a key. The key can't be null or an empty string.
            </summary>
            <returns>A Task&lt;GameState&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
            <exception cref="T:System.ArgumentException">When key is null or empty.</exception>
        </member>
        <member name="Buddy.GameStatesTaskWrappers.RemoveAsync">
            <param name="gameStates">To be added.</param>
            <param name="gameStateKey">The key to remove from the GameState.</param>
            <summary>
            Remove a GameState key.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GameStatesTaskWrappers.UpdateAsync">
            <param name="gameStates">To be added.</param>
            <param name="gameStateKey">The key to update.</param>
            <param name="gameStateValue">The value to update.</param>
            <param name="newAppTag">An optional new application tag for the value.</param>
            <summary>
            Update a GameState value.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GroupMessage.DateSent">
            <summary>
            Gets the DateTime the message was sent.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GroupMessage.FromUserID">
            <summary>
            Gets the user ID of the user that sent the message to the group.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GroupMessage.Group">
            <summary>
            Gets the Message group that the message was sent to.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GroupMessage.Latitude">
            <summary>
            Gets the optional latitude from where the message was sent.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GroupMessage.Longitude">
            <summary>
            Gets the optional longitude from where the message was sent.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.GroupMessage.Text">
            <summary>
            Gets the text value of the message.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Identity.AddAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the value was added, false otherwise.</param>
            <param name="value">The value to add.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Add an identity value for this user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Identity.CheckForValuesAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of identity values that were found.</param>
            <param name="values">The value to search for. This can either be a single value or a semi-colon separated list of values.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Check for the existance of an identity value in the system. The search is perform for the entire app.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Identity.GetAllAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of identity values.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Returns all the identity values for this user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Identity.RemoveAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the value was removed, false otherwise.</param>
            <param name="value">The value to remove.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Remove an identity value for this user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Identity.Token">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.IdentityItem.CreatedOn">
            <summary>
            Gets the date the identity value was added.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.IdentityItem.Value">
            <summary>
            Gets the value of the identity item.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.IdentityItemSearchResult.BelongsToUserId">
            <summary>
            Gets the ID of the user the item was found on.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.IdentityItemSearchResult.Found">
            <summary>
            Gets whether the specific item was found.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.IdentityTaskWrappers.AddAsync">
            <param name="identity">To be added.</param>
            <param name="value">The value to add.</param>
            <summary>
            Add an identity value for this user.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.IdentityTaskWrappers.CheckForValuesAsync">
            <param name="identity">To be added.</param>
            <param name="values">The value to search for. This can either be a single value or a semi-colon separated list of values.</param>
            <summary>
            Check for the existance of an identity value in the system. The search is perform for the entire app.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;IdentityItemSearchResult&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.IdentityTaskWrappers.GetAllAsync">
            <param name="identity">To be added.</param>
            <summary>
            Returns all the identity values for this user.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;IdentityItem&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.IdentityTaskWrappers.RemoveAsync">
            <param name="identity">To be added.</param>
            <param name="value">The value to remove.</param>
            <summary>
            Remove an identity value for this user.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Message.DateSent">
            <summary>
            Gets the DateTime the message was sent.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Message.FromUserID">
            <summary>
            Gets the ID of the user who sent the message.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Message.Text">
            <summary>
            Gets the text value of the message.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Message.ToUserID">
            <summary>
            Gets the ID of the user who received the message.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroup.AddUserAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="userToAdd">The User to add to the message group.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Add a user to this message group. 
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroup.AppTag">
            <summary>
            Gets the app tag that was associated with this message group.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroup.CreatedOn">
            <summary>
            Gets the DateTime the message group was created.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroup.DeleteAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Delete this message group.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroup.GetReceivedAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of messages the group has received.</param>
            <param name="afterDate">Optionally return only messages sent after this date.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get all messages this group has received.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroup.ID">
            <summary>
            Gets the App unique ID of the message group.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroup.JoinAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            This method has the current user join this message group.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroup.LeaveAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            This methods has the current user leave this message group.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroup.MemberUserIDs">
            <summary>
            Gets a list of IDs of users that belong to this message group.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroup.Name">
            <summary>
            Gets the name of the message group.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroup.OwnerUserID">
            <summary>
            Gets the ID of the user that created this message group.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroup.RemoveUserAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="userToRemove">The user to remove from the group.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Remove a user from this message group.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroup.SendMessageAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a map of users and a boolean indicating whether the message was successfully sent to them.</param>
            <param name="message">The message to send to this group. Must be less then 1000 characters.</param>
            <param name="latitude">The optional latitude from where this message was sent.</param>
            <param name="longitude">The optional longitude from where this message was sent.</param>
            <param name="appTag">An optional application tag for this message.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Send a message to the entire message group.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroups.CheckIfExistsAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the group exists, false otherwise.</param>
            <param name="name">The name of the group to check for.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Check if a group with this name already exists.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroups.CreateAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the Group that was create or null if a group with that name already exists.</param>
            <param name="name">The name of the new group, must be unique for the app.</param>
            <param name="openGroup">Optionally whether to make to group open for all user (anyone can join), or closed (only the owner can add users to it).</param>
            <param name="appTag">An optional application tag for this message group.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Create a new message group.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroups.GetAllAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of message groups on success.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get all message groups for this app.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroups.GetMyAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of message groups.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get all message groups that this user is part of.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroupsTaskWrappers.CheckIfExistsAsync">
            <param name="messageGroups">To be added.</param>
            <param name="name">The name of the group to check for.</param>
            <summary>
            Check if a group with this name already exists.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroupsTaskWrappers.CreateAsync">
            <param name="messageGroups">To be added.</param>
            <param name="name">The name of the new group, must be unique for the app.</param>
            <param name="openGroup">Optionally whether to make to group open for all user (anyone can join), or closed (only the owner can add users to it).</param>
            <param name="appTag">An optional application tag for this message group.</param>
            <summary>
            Create a new message group.
            </summary>
            <returns>A Task&lt;MessageGroup&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroupsTaskWrappers.GetAllAsync">
            <param name="messageGroups">To be added.</param>
            <summary>
            Get all message groups for this app.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;MessageGroup&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroupsTaskWrappers.GetMyAsync">
            <param name="messageGroups">To be added.</param>
            <summary>
            Get all message groups that this user is part of.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;MessageGroup&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroupTaskWrappers.AddUserAsync">
            <param name="messageGroup">To be added.</param>
            <param name="userToAdd">The User to add to the message group.</param>
            <summary>
            Add a user to this message group. 
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroupTaskWrappers.DeleteAsync">
            <param name="messageGroup">To be added.</param>
            <summary>
            Delete this message group.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroupTaskWrappers.GetReceivedAsync">
            <param name="messageGroup">To be added.</param>
            <param name="afterDate">Optionally return only messages sent after this date.</param>
            <summary>
            Get all messages this group has received.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;GroupMessage&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroupTaskWrappers.JoinAsync">
            <param name="messageGroup">To be added.</param>
            <summary>
            This method has the current user join this message group.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroupTaskWrappers.LeaveAsync">
            <param name="messageGroup">To be added.</param>
            <summary>
            This methods has the current user leave this message group.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroupTaskWrappers.RemoveUserAsync">
            <param name="messageGroup">To be added.</param>
            <param name="userToRemove">The user to remove from the group.</param>
            <summary>
            Remove a user from this message group.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessageGroupTaskWrappers.SendMessageAsync">
            <param name="messageGroup">To be added.</param>
            <param name="message">The message to send to this group. Must be less then 1000 characters.</param>
            <param name="latitude">The optional latitude from where this message was sent.</param>
            <param name="longitude">The optional longitude from where this message was sent.</param>
            <param name="appTag">An optional application tag for this message.</param>
            <summary>
            Send a message to the entire message group.
            </summary>
            <returns>A Task&lt;IDictionary&lt;Int32,Boolean&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Messages.GetReceivedAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of messages that the user received.</param>
            <param name="afterDate">Optionally retreive only messages after a certain DateTime.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get all received message by the current user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Messages.GetSentAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of messages that the user sent.</param>
            <param name="afterDate">Optionally retreive only messages after a certain DateTime.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get all sent message by the current user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Messages.Groups">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Messages.SendAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="toUser">The user to send a message to.</param>
            <param name="message">The message to send, must be less then 200 characters.</param>
            <param name="appTag">An optional application tag to set for the message.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Send a message to a user from the current authenticated user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessagesTaskWrappers.GetReceivedAsync">
            <param name="messages">To be added.</param>
            <param name="afterDate">Optionally retreive only messages after a certain DateTime.</param>
            <summary>
            Get all received message by the current user.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;Message&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessagesTaskWrappers.GetSentAsync">
            <param name="messages">To be added.</param>
            <param name="afterDate">Optionally retreive only messages after a certain DateTime.</param>
            <summary>
            Get all sent message by the current user.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;Message&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MessagesTaskWrappers.SendAsync">
            <param name="messages">To be added.</param>
            <param name="toUser">The user to send a message to.</param>
            <param name="message">The message to send, must be less then 200 characters.</param>
            <param name="appTag">An optional application tag to set for the message.</param>
            <summary>
            Send a message to a user from the current authenticated user.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.ApplicationTag">
            <summary>
            Gets a custom application Tag for this item.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.CompareTo">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.DeleteAsync">
            <param name="callback">The callback to call when this method completes. The first parameter is true if the item was deleted, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Deletes this metadata item.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.DistanceInKilometers">
            <summary>
            Gets the distance in kilo-meters from the given origin in the Metadata Search method.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.DistanceInMeters">
            <summary>
            Gets the distance in meters from the given origin in the Metadata Search method.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.DistanceInMiles">
            <summary>
            Gets the distance in miles from the given origin in the Metadata Search method.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.DistanceInYards">
            <summary>
            Gets the distance in yards from the given origin in the Metadata Search method.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.DistanceOriginLatitude">
            <summary>
            Gets the latitude of the origin that was used in the metadata search.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.DistanceOriginLongitude">
            <summary>
            Gets the longitude of the origin that was used in the metadata search.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.Key">
            <summary>
            Gets the key for this item.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.LastUpdateOn">
            <summary>
            Gets the last date this item was updated.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.Latitude">
            <summary>
            Gets the latitude of this item.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.Longitude">
            <summary>
            Gets the longitude of this item.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.Owner">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.OwnerApp">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.SetAsync">
            <param name="callback">The callback to call when this method completes. The first parameter is true if the update was successful, false otherwise.</param>
            <param name="value">The new value for this item, can't be null.</param>
            <param name="latitude">The optional latitude for this item.</param>
            <param name="longitude">The optional longitude for this item.</param>
            <param name="appTag">The optional application tag for this item.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Updates the value of this metadata item.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.Token">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItem.Value">
            <summary>
            Gets the value for this item.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItemTaskWrappers.DeleteAsync">
            <param name="metadataItem">To be added.</param>
            <summary>
            Deletes this metadata item.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataItemTaskWrappers.SetAsync">
            <param name="metadataItem">To be added.</param>
            <param name="value">The new value for this item, can't be null.</param>
            <param name="latitude">The optional latitude for this item.</param>
            <param name="longitude">The optional longitude for this item.</param>
            <param name="appTag">The optional application tag for this item.</param>
            <summary>
            Updates the value of this metadata item.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataSum.Key">
            <summary>
            Gets the common key that was used to produce this sum.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataSum.KeysCounted">
            <summary>
            Gets the number of items that were summed.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetadataSum.Total">
            <summary>
            Gets the total sum of the metadata items.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetroArea.ImageURL">
            <summary>
            Gets the image URL an image for the area.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.MetroArea.MetroName">
            <summary>
            Gets the name of the the supported metro area.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Notifications.Android">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Notifications.Apple">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Notifications.AuthUserRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Notifications.GetGroupsAsync">
            <param name="callback">To be added.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a list of groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            <param name="callback">The async callback to call on success or error. The first parameter is a list of group names with counts per group.</param></summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Notifications.GetRegisteredDevicesAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of registered devices with user IDs. You can then user the IDs to send notifications to those users.</param>
            <param name="forGroup">Optionally filter only devices in a certain group.</param>
            <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
            <param name="currentPage">Set the current page.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a paged list of registered devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Notifications.RegisterDeviceAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="deviceUri">The device notification channel URI.</param>
            <param name="enableTile">Optionally enable tile notifications</param>
            <param name="enableRaw">Optionally enable raw notifications.</param>
            <param name="enableToast">Optionally enable toast notifications.</param>
            <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Register a Windows device for notificatons with Buddy. The URL is the notifications channel link that provided by the platform. Most of the time
            you don't need to call this API directly, you can use ConfigurePushAsync instead which will configure everyting for you. Note that if you call this method,
            you are responsible to configure the device for push notifications.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Notifications.SendRawMessageAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="rawMessage">The message to send.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Send a raw message to a windows phone device. The app needs to be active and the Raw message callback set in order to recieve this message.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Notifications.SendTileAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="imageUri">The URL of the tile image.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="messageCount">The message count for this tile.</param>
            <param name="messageTitle">The message title for the tile.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Send a image tile to a windows phone device. The tile is represented by a image URL, you can take a look at the Windows phone docs for image dimensions and formats.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Notifications.SendToastMessageAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="toastTitle">The title of the toast message/</param>
            <param name="toastSubtitle">The subtitle of the toast message.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="toastParameter">An optional parameter for the toast message.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Send toast message to a windows phone device. If the app is active the user will recieve this message in the toast message callback. Otherwise the message
            appears as a notification on top of the screen. Clicking it will launch the app.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Notifications.UnregisterDeviceAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Unregister the current user from push notifications.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Notifications.Win8">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAndroid.AuthUserRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAndroid.GetGroupsAsync">
            <param name="callback">To be added.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a list of Android groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            <param name="callback">The async callback to call on success or error. The first parameter is a list of group names with counts per group.</param></summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAndroid.GetRegisteredDevicesAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of registered devices with user IDs. You can then user the IDs to send notifications to those users.</param>
            <param name="forGroup">Optionally filter only devices in a certain group.</param>
            <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
            <param name="currentPage">Set the current page.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a paged list of registered Android devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAndroid.RegisterDeviceAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="registrationID">The registration ID for the application currently running on the device. Note: this is the registration ID returned after registering with C2DM.</param>
            <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Register an Android device for notificatons with Buddy. 
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAndroid.SendRawMessageAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="rawMessage">The message to send.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Send a raw message to a Android device. Note that this call does not directly send the message but rather, adds the raw message to the queue of messages to be sent.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAndroid.UnregisterDeviceAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Unregister the current user from push notifications for Android.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAndroidTaskWrappers.GetGroupsAsync">
            <param name="notificationsAndroid">To be added.</param>
            <summary>
            Get a list of Android groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            </summary>
            <returns>A Task&lt;IDictionary&lt;String,Int32&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAndroidTaskWrappers.GetRegisteredDevicesAsync">
            <param name="notificationsAndroid">To be added.</param>
            <param name="forGroup">Optionally filter only devices in a certain group.</param>
            <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
            <param name="currentPage">Set the current page.</param>
            <summary>
            Get a paged list of registered Android devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;RegisteredDeviceAndroid&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAndroidTaskWrappers.RegisterDeviceAsync">
            <param name="notificationsAndroid">To be added.</param>
            <param name="registrationID">The registration ID for the application currently running on the device. Note: this is the registration ID returned after registering with C2DM.</param>
            <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
            <summary>
            Register an Android device for notificatons with Buddy. 
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAndroidTaskWrappers.SendRawMessageAsync">
            <param name="notificationsAndroid">To be added.</param>
            <param name="rawMessage">The message to send.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <summary>
            Send a raw message to a Android device. Note that this call does not directly send the message but rather, adds the raw message to the queue of messages to be sent.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAndroidTaskWrappers.UnregisterDeviceAsync">
            <param name="notificationsAndroid">To be added.</param>
            <summary>
            Unregister the current user from push notifications for Android.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsApple.AuthUserRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsApple.GetGroupsAsync">
            <param name="callback">To be added.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a list of Apple groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            <param name="callback">The async callback to call on success or error. The first parameter is a list of group names with counts per group.</param></summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsApple.GetRegisteredDevicesAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of registered devices with user IDs. You can then user the IDs to send notifications to those users.</param>
            <param name="forGroup">Optionally filter only devices in a certain group.</param>
            <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
            <param name="currentPage">Set the current page.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a paged list of registered Apple devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsApple.RegisterDeviceAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="appleDeviceToken">A token provided by the Apple Push Notification Service (APNs) which identifies the device to register (analogous to a phone number).</param>
            <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Register an Apple device for notificatons with Buddy. 
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsApple.SendRawMessageAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="message">The message to send to the user.</param>
            <param name="badge">The badge number to set on the icon. It is the application's responsibility to determine what number to set.</param>
            <param name="sound">The notification sound to play.</param>
            <param name="customItems">Metadata to send with the message for the receiving application to use. Data should be specified as key/value pairs where each key and value are seperated by a comma and each pair is seperated by a ";" character including the last pair ie: key,value;key,value;. Leave empty or set to null if there is no metadata to send.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Send a raw message to a Apple device. Note that this call does not directly send the message but rather, adds the raw message to the queue of messages to be sent.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsApple.UnregisterDeviceAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Unregister the current user from push notifications for Apple devices.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAppleTaskWrappers.GetGroupsAsync">
            <param name="notificationsApple">To be added.</param>
            <summary>
            Get a list of Apple groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            </summary>
            <returns>A Task&lt;IDictionary&lt;String,Int32&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAppleTaskWrappers.GetRegisteredDevicesAsync">
            <param name="notificationsApple">To be added.</param>
            <param name="forGroup">Optionally filter only devices in a certain group.</param>
            <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
            <param name="currentPage">Set the current page.</param>
            <summary>
            Get a paged list of registered Apple devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;RegisteredDeviceApple&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAppleTaskWrappers.RegisterDeviceAsync">
            <param name="notificationsApple">To be added.</param>
            <param name="appleDeviceToken">A token provided by the Apple Push Notification Service (APNs) which identifies the device to register (analogous to a phone number).</param>
            <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
            <summary>
            Register an Apple device for notificatons with Buddy. 
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAppleTaskWrappers.SendRawMessageAsync">
            <param name="notificationsApple">To be added.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="message">The message to send to the user.</param>
            <param name="badge">The badge number to set on the icon. It is the application's responsibility to determine what number to set.</param>
            <param name="sound">The notification sound to play.</param>
            <param name="customItems">Metadata to send with the message for the receiving application to use. Data should be specified as key/value pairs where each key and value are seperated by a comma and each pair is seperated by a ";" character including the last pair ie: key,value;key,value;. Leave empty or set to null if there is no metadata to send.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <summary>
            Send a raw message to a Apple device. Note that this call does not directly send the message but rather, adds the raw message to the queue of messages to be sent.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsAppleTaskWrappers.UnregisterDeviceAsync">
            <param name="notificationsApple">To be added.</param>
            <summary>
            Unregister the current user from push notifications for Apple devices.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsTaskWrappers.GetGroupsAsync">
            <param name="notifications">To be added.</param>
            <summary>
            Get a list of groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            </summary>
            <returns>A Task&lt;IDictionary&lt;String,Int32&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsTaskWrappers.GetRegisteredDevicesAsync">
            <param name="notifications">To be added.</param>
            <param name="forGroup">Optionally filter only devices in a certain group.</param>
            <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
            <param name="currentPage">Set the current page.</param>
            <summary>
            Get a paged list of registered devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;RegisteredDevice&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsTaskWrappers.RegisterDeviceAsync">
            <param name="notifications">To be added.</param>
            <param name="deviceUri">The device notification channel URI.</param>
            <param name="enableTile">Optionally enable tile notifications</param>
            <param name="enableRaw">Optionally enable raw notifications.</param>
            <param name="enableToast">Optionally enable toast notifications.</param>
            <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
            <summary>
            Register a Windows device for notificatons with Buddy. The URL is the notifications channel link that provided by the platform. Most of the time
            you don't need to call this API directly, you can use ConfigurePushAsync instead which will configure everyting for you. Note that if you call this method,
            you are responsible to configure the device for push notifications.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsTaskWrappers.SendRawMessageAsync">
            <param name="notifications">To be added.</param>
            <param name="rawMessage">The message to send.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <summary>
            Send a raw message to a windows phone device. The app needs to be active and the Raw message callback set in order to recieve this message.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsTaskWrappers.SendTileAsync">
            <param name="notifications">To be added.</param>
            <param name="imageUri">The URL of the tile image.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="messageCount">The message count for this tile.</param>
            <param name="messageTitle">The message title for the tile.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <summary>
            Send a image tile to a windows phone device. The tile is represented by a image URL, you can take a look at the Windows phone docs for image dimensions and formats.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsTaskWrappers.SendToastMessageAsync">
            <param name="notifications">To be added.</param>
            <param name="toastTitle">The title of the toast message/</param>
            <param name="toastSubtitle">The subtitle of the toast message.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="toastParameter">An optional parameter for the toast message.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <summary>
            Send toast message to a windows phone device. If the app is active the user will recieve this message in the toast message callback. Otherwise the message
            appears as a notification on top of the screen. Clicking it will launch the app.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsTaskWrappers.UnregisterDeviceAsync">
            <param name="notifications">To be added.</param>
            <summary>
            Unregister the current user from push notifications.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8.AuthUserRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8.GetGroupsAsync">
            <param name="callback">To be added.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a list of Win8 groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            <param name="callback">The async callback to call on success or error. The first parameter is a list of group names with counts per group.</param></summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8.GetRegisteredDevicesAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of registered devices with user IDs. You can then user the IDs to send notifications to those users.</param>
            <param name="forGroup">Optionally filter only devices in a certain group.</param>
            <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
            <param name="currentPage">Set the current page.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a paged list of registered Win8 devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8.RegisterDeviceAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="deviceUri">The URI for the device as returned by the Windows push phone HttpNotificationChannel object.</param>
            <param name="clientId">The Package Security Identifier (SID) acquired when the app was registered with the Windows Store Dashboard. </param>
            <param name="clientSecret">The secret key corresponding to the SID acquired when the app was registered with the Windows Store Dashboard.</param>
            <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Register an Win8 device for notificatons with Buddy. 
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8.SendBadgeAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="xmlPayload">The message to send.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Send a badge to a windows 8 device. The app needs to be active and the Raw message callback set in order to recieve this message.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8.SendTileAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="xmlPayload">The xml schema describing the tile. Can be specified in the URL using proper character escaping or via the message body. For more information <see href="http://msdn.microsoft.com/en-us/library/windows/apps/hh761491.aspx" />.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Send a image tile to a Win8 device. The tile is represented by a image URL, you can take a look at the Windows phone docs for image dimensions and formats.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8.SendToastMessageAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="xmlPayload">The xml schema describing the tile. Can be specified in the URL using proper character escaping or via the message body. For more information <see href="http://msdn.microsoft.com/en-us/library/windows/apps/hh761491.aspx" />.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Send toast message to a windows 8 device. If the app is active the user will recieve this message in the toast message callback. Otherwise the message
            appears as a notification on top of the screen. Clicking it will launch the app.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8.UnregisterDeviceAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Unregister the current user from push notifications for Win8 devices.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8TaskWrappers.GetGroupsAsync">
            <param name="notificationsWin8">To be added.</param>
            <summary>
            Get a list of Win8 groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            </summary>
            <returns>A Task&lt;IDictionary&lt;String,Int32&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8TaskWrappers.GetRegisteredDevicesAsync">
            <param name="notificationsWin8">To be added.</param>
            <param name="forGroup">Optionally filter only devices in a certain group.</param>
            <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
            <param name="currentPage">Set the current page.</param>
            <summary>
            Get a paged list of registered Win8 devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;RegisteredDeviceWin8&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8TaskWrappers.RegisterDeviceAsync">
            <param name="notificationsWin8">To be added.</param>
            <param name="deviceUri">The URI for the device as returned by the Windows push phone HttpNotificationChannel object.</param>
            <param name="clientId">The Package Security Identifier (SID) acquired when the app was registered with the Windows Store Dashboard. </param>
            <param name="clientSecret">The secret key corresponding to the SID acquired when the app was registered with the Windows Store Dashboard.</param>
            <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
            <summary>
            Register an Win8 device for notificatons with Buddy. 
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8TaskWrappers.SendBadgeAsync">
            <param name="notificationsWin8">To be added.</param>
            <param name="xmlPayload">The message to send.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <summary>
            Send a badge to a windows 8 device. The app needs to be active and the Raw message callback set in order to recieve this message.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8TaskWrappers.SendTileAsync">
            <param name="notificationsWin8">To be added.</param>
            <param name="xmlPayload">The xml schema describing the tile. Can be specified in the URL using proper character escaping or via the message body. For more information <see href="http:///msdn.microsoft.com/en-us/library/windows/apps/hh761491.aspx" />.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <summary>
            Send a image tile to a Win8 device. The tile is represented by a image URL, you can take a look at the Windows phone docs for image dimensions and formats.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8TaskWrappers.SendToastMessageAsync">
            <param name="notificationsWin8">To be added.</param>
            <param name="xmlPayload">The xml schema describing the tile. Can be specified in the URL using proper character escaping or via the message body. For more information <see href="http:///msdn.microsoft.com/en-us/library/windows/apps/hh761491.aspx" />.</param>
            <param name="senderUserId">The ID of the user that sent the notification.</param>
            <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
            <param name="groupName">Send messages to an entire group of users, not just a one.</param>
            <summary>
            Send toast message to a windows 8 device. If the app is active the user will recieve this message in the toast message callback. Otherwise the message
            appears as a notification on top of the screen. Clicking it will launch the app.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.NotificationsWin8TaskWrappers.UnregisterDeviceAsync">
            <param name="notificationsWin8">To be added.</param>
            <summary>
            Unregister the current user from push notifications for Win8 devices.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbum.AddPicture">
            <param name="blob">To be added.</param>
            <param name="comment">To be added.</param>
            <param name="latitude">To be added.</param>
            <param name="longitude">To be added.</param>
            <param name="appTag">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbum.AddPictureAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the new picture that was added or null on error.</param>
            <param name="blob">The image byte array of the picture.</param>
            <param name="comment">An optional comment for this picture.</param>
            <param name="latitude">An optional latitude for the picture.</param>
            <param name="longitude">An optional longitude for the picture.</param>
            <param name="appTag">An optional application tag.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Add a new picture to this album. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbum.AddPictureWithWatermark">
            <param name="blob">To be added.</param>
            <param name="comment">To be added.</param>
            <param name="latitude">To be added.</param>
            <param name="longitude">To be added.</param>
            <param name="appTag">To be added.</param>
            <param name="watermarkmessage">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbum.AddPictureWithWatermarkAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the new picture that was added or null on error.</param>
            <param name="blob">The image byte array of the picture.</param>
            <param name="comment">An optional comment for this picture.</param>
            <param name="latitude">An optional latitude for the picture.</param>
            <param name="longitude">An optional longitude for the picture.</param>
            <param name="appTag">An optional application tag.</param>
            <param name="watermarkmessage">An optional message to watermark the image with.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Add a new picture to this album. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbum.AlbumId">
            <summary>
            Gets the global unique album ID.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbum.DeleteAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if successful, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Delete this photo album.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbum.Pictures">
            <summary>
            Gets a readonly collection of pictures in this album. Use the AddPicture method to add more pictures to the album or the Picture.Delete method
            to remove them.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbumPublic.AlbumName">
            <summary>
            Gets the name of the album
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbumPublic.AuthUserRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbumPublic.Pictures">
            <summary>
            Gets a list of pictures in this album.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbumPublic.UserId">
            <summary>
            Gets the user ID of the user that owns this album.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbums.CreateAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the new photo album that was created, null if an error occured.</param>
            <param name="name">The name of the new album.</param>
            <param name="isPublic">Make the album publicly visible to other users.</param>
            <param name="appTag">Optionally add a custom application tag for this user.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            This method is used create a new album. The album will be owned by this user. Multiple albums can be created with the same name. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbums.GetAllAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of photo albums that this user owns.</param>
            <param name="afterDate">Optionally return all albums created after a date.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Return all photo albums for this user. Note that this can be an expensive operation since all the Picture data is retrieved as well.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbums.GetAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the photo album if successful, null otherwise.</param>
            <param name="albumId">The ID of the album.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a photo album by ID. This album doesn't need to be owned by this user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbums.GetAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the PhotoAlbum if found, null otherwise.</param>
            <param name="albumName">The name of the albul to retrieve. Can't be null or empty.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a photo album by its name. Note that there can be more than one album with the same name. This method will only return the first one.
            Call PhotoAlbums.All to get all the albums.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbumsTaskWrappers.CreateAsync">
            <param name="photoAlbums">To be added.</param>
            <param name="name">The name of the new album.</param>
            <param name="isPublic">Make the album publicly visible to other users.</param>
            <param name="appTag">Optionally add a custom application tag for this user.</param>
            <summary>
            This method is used create a new album. The album will be owned by this user. Multiple albums can be created with the same name. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>A Task&lt;PhotoAlbum&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbumsTaskWrappers.GetAllAsync">
            <param name="photoAlbums">To be added.</param>
            <param name="afterDate">Optionally return all albums created after a date.</param>
            <summary>
            Return all photo albums for this user. Note that this can be an expensive operation since all the Picture data is retrieved as well.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;PhotoAlbum&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbumsTaskWrappers.GetAsync">
            <param name="photoAlbums">To be added.</param>
            <param name="albumId">The ID of the album.</param>
            <summary>
            Get a photo album by ID. This album doesn't need to be owned by this user.
            </summary>
            <returns>A Task&lt;PhotoAlbum&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbumsTaskWrappers.GetAsync">
            <param name="photoAlbums">To be added.</param>
            <param name="albumName">The name of the albul to retrieve. Can't be null or empty.</param>
            <summary>
            Get a photo album by its name. Note that there can be more than one album with the same name. This method will only return the first one.
            Call PhotoAlbums.All to get all the albums.
            </summary>
            <returns>A Task&lt;PhotoAlbum&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbumTaskWrappers.AddPictureAsync">
            <param name="photoAlbum">To be added.</param>
            <param name="photoStream">A stream containing the photo's contents..</param>
            <param name="comment">An optional comment for this picture.</param>
            <param name="latitude">An optional latitude for the picture.</param>
            <param name="longitude">An optional longitude for the picture.</param>
            <param name="appTag">An optional application tag.</param>
            <summary>
            Add a new picture to this album. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>A Task&lt;Picture&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbumTaskWrappers.AddPictureWithWatermarkAsync">
            <param name="photoAlbum">To be added.</param>
            <param name="photoStream">A stream containing the photo's contents..</param>
            <param name="comment">An optional comment for this picture.</param>
            <param name="latitude">An optional latitude for the picture.</param>
            <param name="longitude">An optional longitude for the picture.</param>
            <param name="appTag">An optional application tag.</param>
            <param name="watermarkmessage">An optional message to watermark the image with.</param>
            <summary>
            Add a new picture to this album. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>A Task&lt;Picture&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PhotoAlbumTaskWrappers.DeleteAsync">
            <param name="photoAlbum">To be added.</param>
            <summary>
            Delete this photo album.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Picture.ApplyFilterAsync">
            <param name="filterName">The name of the filter to apply. Cant't be null or empty.</param>
            <param name="filterParams">A semi-colon seperated list of filter parameter names and values. For example: "CropLeft=30;CropRight=40."</param>
            <param name="callback">The async callback to call on success or error. The first parameter is a new picture with the filter applied.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Apply a filter to this picture. A new picture is created and returned after the filter is applied. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Picture.AuthUserRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Picture.DeleteAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the picture was deleted, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Delete this picture. Note that this object will no longer be valid after this method is called. Subsequent calls will fail.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Picture.SetAppTagAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the app tag was added, false otherwise.</param>
            <param name="appTag">The app tag.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Sets the app tag on this picture.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Picture.SupportedFiltersAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of supported filters.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Returns a list of supported filters that can be applied to this picture. Example filters are: Hue Shift, Crop, etc.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PicturePublic.AddedOn">
            <summary>
            Gets the date when this picture was added.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PicturePublic.AppTag">
            <summary>
            Gets the optional application tag of the picture.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PicturePublic.Comment">
            <summary>
            Gets the optional comment of the picture.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PicturePublic.DistanceInKilometers">
            <summary>
            If this picture was returned as part of an album search, gets the distance in kilometers from the location that was used as the origin of the search.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PicturePublic.DistanceInMeters">
            <summary>
            If this picture was returned as part of an album search, gets the distance in meters from the location that was used as the origin of the search.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PicturePublic.DistanceInMiles">
            <summary>
            If this picture was returned as part of an album search, gets the distance in miles from the location that was used as the origin of the search.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PicturePublic.DistanceInYards">
            <summary>
            If this picture was returned as part of an album search, gets the distance in yards from the location that was used as the origin of the search.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PicturePublic.FullUrl">
            <summary>
            Gets the url of the full picture.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PicturePublic.Latitude">
            <summary>
            Gets the latitude of the picture location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PicturePublic.Longitude">
            <summary>
            Gets the longitude of the picture location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PicturePublic.PhotoID">
            <summary>
            Gets the system-wide ID of the picture.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PicturePublic.ThumbnailUrl">
            <summary>
            Gets the url of the thumbnail of the picture.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PicturePublic.User">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PicturePublic.UserId">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PictureTaskWrappers.DeleteAsync">
            <param name="picture">To be added.</param>
            <summary>
            Delete this picture. Note that this object will no longer be valid after this method is called. Subsequent calls will fail.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PictureTaskWrappers.SetAppTagAsync">
            <param name="picture">To be added.</param>
            <param name="appTag">The app tag.</param>
            <summary>
            Sets the app tag on this picture.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PictureTaskWrappers.SupportedFiltersAsync">
            <param name="picture">To be added.</param>
            <summary>
            Returns a list of supported filters that can be applied to this picture. Example filters are: Hue Shift, Crop, etc.
            </summary>
            <returns>A Task&lt;IDictionary&lt;String,String&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.Address">
            <summary>
            Gets the address of the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.AppTagData">
            <summary>
            Gets the custom application tag data for the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.AuthUserRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.CategoryID">
            <summary>
            Gets the category ID of the location (i.e. Hotels).
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.CategoryName">
            <summary>
            Gets the category name for the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.City">
            <summary>
            Gets the city for the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.CreatedDate">
            <summary>
            Gets the date the location was created in the system.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.DistanceInKilometers">
            <summary>
            If this user profile was returned from a search, gets the distance in kilometers from the search origin.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.DistanceInMeters">
            <summary>
            If this user profile was returned from a search, gets the distance in meters from the search origin.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.DistanceInMiles">
            <summary>
            If this user profile was returned from a search, gets the distance in miles from the search origin.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.DistanceInYards">
            <summary>
            If this user profile was returned from a search, gets the distance in yards from the search origin.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.Fax">
            <summary>
            Gets the fax number of the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.ID">
            <summary>
            Gets the globaly unique ID of the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.Latitude">
            <summary>
            Gets the latitude of the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.Longitude">
            <summary>
            Gets the longitude of the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.Name">
            <summary>
            Gets the name of the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.PostalState">
            <summary>
            Gets the postal state of the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.PostalZip">
            <summary>
            Gets the postal ZIP of the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.Region">
            <summary>
            Gets the region of the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.SetTagAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="appTag">The application level tag to set.</param>
            <param name="userTag">The user-level tag to set for this Place.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Set an application specific tag or a user tag for a place.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.ShortID">
            <summary>
            Gets the ShortID of the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.Telephone">
            <summary>
            Gets the telephone number of the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.TouchedDate">
            <summary>
            Gets the last update date of the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.UserTagData">
            <summary>
            Gets the user tag data of the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Place.Website">
            <summary>
            Gets the website of the location.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Places.FindAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of locations that were found.</param>
            <param name="searchDistanceInMeters">The radius of the location search.</param>
            <param name="latitude">The latitude where the search should start.</param>
            <param name="longitude">The longitude where the search should start.</param>
            <param name="numberOfResults">Optional number of result to return, defaults to 10.</param>
            <param name="searchForName">Optional search string, for example: "Star*" to search for all place that start with the string "Star"</param>
            <param name="searchCategoryId">Optional search category ID to narrow down the search with.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Find a location close to a given latitude and logitude.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Places.GetAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the Place on success or null if there is no place with the given ID.</param>
            <param name="placeId">The ID of the place to retreive.</param>
            <param name="latitude">The optional latitude to calcualte a distance to.</param>
            <param name="longitude">The optioanl longitude to calculate a distance to.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a Place by it's globally unique identifier. This method can also be used to calculate a distance from a lat/long to a place.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Places.GetCategoriesAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of geo-location categories mapped to their IDs.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get all geo-location categories in Buddy.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PlacesTaskWrappers.FindAsync">
            <param name="places">To be added.</param>
            <param name="searchDistanceInMeters">The radius of the location search.</param>
            <param name="latitude">The latitude where the search should start.</param>
            <param name="longitude">The longitude where the search should start.</param>
            <param name="numberOfResults">Optional number of result to return, defaults to 10.</param>
            <param name="searchForName">Optional search string, for example: "Star*" to search for all place that start with the string "Star"</param>
            <param name="searchCategoryId">Optional search category ID to narrow down the search with.</param>
            <summary>
            Find a location close to a given latitude and logitude.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;Place&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PlacesTaskWrappers.GetAsync">
            <param name="places">To be added.</param>
            <param name="placeId">The ID of the place to retreive.</param>
            <param name="latitude">The optional latitude to calcualte a distance to.</param>
            <param name="longitude">The optioanl longitude to calculate a distance to.</param>
            <summary>
            Get a Place by it's globally unique identifier. This method can also be used to calculate a distance from a lat/long to a place.
            </summary>
            <returns>A Task&lt;Place&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PlacesTaskWrappers.GetCategoriesAsync">
            <param name="places">To be added.</param>
            <summary>
            Get all geo-location categories in Buddy.
            </summary>
            <returns>A Task&lt;IDictionary&lt;Int32,String&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.PlaceTaskWrappers.SetTagAsync">
            <param name="place">To be added.</param>
            <param name="appTag">The application level tag to set.</param>
            <param name="userTag">The user-level tag to set for this Place.</param>
            <summary>
            Set an application specific tag or a user tag for a place.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Receipt.AppData">
            <summary>
            Gets the (optional) metadata that was stored with this receipt.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Receipt.HistoryCustomTransactionID">
            <summary>
            Gets the customTransactionID that was saved for this receipt.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Receipt.HistoryDateTime">
            <summary>
            Gets the DateTime this receipt was saved or modified.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Receipt.ItemQuantity">
            <summary>
            Gets the number of items which were purchased during the transaction associated with this receipt.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Receipt.ReceiptData">
            <summary>
            Gets the receipt data that was stored with this receipt.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Receipt.ReceiptHistoryID">
            <summary>
            Gets the ID of the retrieved receipt history item.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Receipt.StoreItemID">
            <summary>
            Gets the Buddy StoreItemID of the item purchased in this transaction.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Receipt.StoreName">
            <summary>
            Gets the name of the store in which this receipt was saved.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Receipt.TotalCost">
            <summary>
            Gets the total cost of the transaction associated with this receipt.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Receipt.UserID">
            <summary>
            Gets the ID of the user this receipt was saved for.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Receipt.VerificationResultData">
            <summary>
            Gets the raw verification data associated with the receipt as returned from the underlying Facebook or Apple servers.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ReflectionExtensions.GetCustomAttributes">
            <param name="a">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ReflectionExtensions.GetRuntimeMethod">
            <param name="type">To be added.</param>
            <param name="name">To be added.</param>
            <param name="parameterTypes">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ReflectionExtensions.GetRuntimeProperty">
            <param name="type">To be added.</param>
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.ReflectionExtensions.GetTypeInfo">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDevice.DeviceUri">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDevice.GroupName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDevice.LastUpdateDate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDevice.RawMessagesEnabled">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDevice.RegistrationDate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDevice.TilesEnabled">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDevice.ToastMessagesEnabled">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDevice.User">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDevice.UserID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceAndroid.GroupName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceAndroid.LastUpdateDate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceAndroid.RegistrationDate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceAndroid.RegistrationID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceAndroid.User">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceAndroid.UserID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceApple.APNSDeviceToken">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceApple.GroupName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceApple.LastUpdateDate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceApple.RegistrationDate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceApple.User">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceApple.UserID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceWin8.ClientID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceWin8.ClientSecret">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceWin8.DeviceURI">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceWin8.GroupName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceWin8.LastUpdateDate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceWin8.RegistrationDate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceWin8.User">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.RegisteredDeviceWin8.UserID">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Sounds.GetSoundAsync">
            <param name="callback">Callback that will be invoked upon completion.</param>
            <param name="soundName">The name of the sound file.  See the Buddy Developer Portal "Sounds" page to find sounds and get their names.</param>
            <param name="quality">The quality level of the file to retrieve.</param>
            <summary>
            Retrieves a sound from the Buddy sound library, and returns a Stream.  Your application should perisist this stream locally in a location such as IsolatedStorage.
            </summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Sounds+SoundQuality.High">
            <summary>To be added.</summary>
        </member>
        <member name="Buddy.Sounds+SoundQuality.Low">
            <summary>To be added.</summary>
        </member>
        <member name="Buddy.Sounds+SoundQuality.Medium">
            <summary>To be added.</summary>
        </member>
        <member name="Buddy.SoundsTaskWrappers.GetSoundAsync">
            <param name="sounds">To be added.</param>
            <param name="soundName">To be added.</param>
            <param name="quality">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.CenterLat">
            <summary>
            Gets the latitude of the center of the specified metro area.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.CenterLong">
            <summary>
            Gets the longitude of the center of the specified metro area.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.City">
            <summary>
            Gets the city in which the startup is located.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.CrunchBaseUrl">
            <summary>
            Gets the crunchbase.com URL of the startup.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.CustomData">
            <summary>
            Gets the custom data of the startup.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.DistanceInKilometers">
            <summary>
            Gets the distance in kilometers from the center of the specified metro area that the startup is located.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.DistanceInMeters">
            <summary>
            Gets the distance in meters from the center of the specified metro area that the startup is located.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.DistanceInMiles">
            <summary>
            Gets the distance in miles from the center of the specified metro area that the startup is located.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.DistanceInYards">
            <summary>
            Gets the distance in yards from the center of the specified metro area that the startup is located.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.EmployeeCount">
            <summary>
            Gets the number of employees employed by the startup.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.FacebookURL">
            <summary>
            Gets URL of the startup's Facebook page.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.FundingSource">
            <summary>
            Gets the source of the funds raised by the startup.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.HomePageURL">
            <summary>
            Gets the URL of the statup's home page.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.Industry">
            <summary>
            Gets the industry of the startup.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.LinkedinURL">
            <summary>
            Gets the URL of the startup's LinkedIn page.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.LogoURL">
            <summary>
            Gets the logo URL of the startup.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.MetroLocation">
            <summary>
            Gets the metro area in which the startup is located.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.PhoneNumber">
            <summary>
            Gets the phone number of the startup.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.StartupID">
            <summary>
            Gets the unique ID assigned to the startup.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.StartupName">
            <summary>
            Gets the company name of the startup.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.State">
            <summary>
            Gets the state in which the startup is located.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.StreetAddress">
            <summary>
            Gets the address of the startup.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.TotalFundingRaised">
            <summary>
            Gets the amount of money that the startup as raised.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.TwitterURL">
            <summary>
            Gets the startup's Twitter URL.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startup.ZipPostal">
            <summary>
            Gets the zip or postal code of the startup.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startups.AuthUserRequired">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startups.FindAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of startups that were found.</param>
            <param name="searchDistanceInMeters">The radius of the startup search.</param>
            <param name="latitude">The latitude where the search should start.</param>
            <param name="longitude">The longitude where the search should start.</param>
            <param name="numberOfResults">The number of search results to return.</param>
            <param name="searchForName">Optional search string, for example: "Star*" to search for all startups that begin with the string "Star".</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Searches for statups by name within the distance of the specified location. Note: To search for all startups within the distance from the specified location, leave the SearchName parameter empty.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startups.GetFromMetroAreaAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a .NET List of Startups that were found.</param>
            <param name="metroName">The name of the metro area within which to search for startups.</param>
            <param name="recordLimit">The number of search results to return.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a list of startups in the specified metro area.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.Startups.GetMetroAreaListAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a .NET List of MetroAreas that were found.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Gets a list of the supported metro areas for statups including the URL to an image for each area returned.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StartupsTaskWrappers.FindAsync">
            <param name="startups">To be added.</param>
            <param name="searchDistanceInMeters">The radius of the startup search.</param>
            <param name="latitude">The latitude where the search should start.</param>
            <param name="longitude">The longitude where the search should start.</param>
            <param name="numberOfResults">The number of search results to return.</param>
            <param name="searchForName">Optional search string, for example: "Star*" to search for all startups that begin with the string "Star".</param>
            <summary>
            Searches for statups by name within the distance of the specified location. Note: To search for all startups within the distance from the specified location, leave the SearchName parameter empty.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;Startup&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StartupsTaskWrappers.GetFromMetroAreaAsync">
            <param name="startups">To be added.</param>
            <param name="metroName">The name of the metro area within which to search for startups.</param>
            <param name="recordLimit">The number of search results to return.</param>
            <summary>
            Get a list of startups in the specified metro area.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;Startup&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StartupsTaskWrappers.GetMetroAreaListAsync">
            <param name="startups">To be added.</param>
            <summary>
            Gets a list of the supported metro areas for statups including the URL to an image for each area returned.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;MetroArea&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StoreItem.AppData">
            <summary>
            Gets the optional metadata associated with the item.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StoreItem.CustomItemID">
            <summary>
            Gets the ID by which external sources identify the item by.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StoreItem.ItemAvailableFlag">
            <summary>
            Gets the flag indicating if the item is currently available for sale.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StoreItem.ItemCost">
            <summary>
            Gets the cost of the item.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StoreItem.ItemDateTime">
            <summary>
            Gets the date and time when the item was created or last updated.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StoreItem.ItemDescription">
            <summary>
            Gets the brief description of the item.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StoreItem.ItemDownloadUri">
            <summary>
            Gets the URI where the item can be downloaded from.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StoreItem.ItemFreeFlag">
            <summary>
            Gets the flag indicating if the item is free.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StoreItem.ItemIconUri">
            <summary>
            Gets the URI of the icon to display for this item.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StoreItem.ItemName">
            <summary>
            Gets the name of the item.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StoreItem.ItemPreviewUri">
            <summary>
            Gets the URI where the item can be previewed.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.StoreItem.StoreItemID">
            <summary>
            Gets the ID of the store item.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.Age">
            <summary>
            Gets the age of this user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.ApplicationTag">
            <summary>
            Gets the optional application tag for the user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.CreatedOn">
            <summary>
            Gets the date this user was created.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.DistanceInKilometers">
            <summary>
            If this user profile was returned from a search, gets the distance in kilometers from the search origin.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.DistanceInMeters">
            <summary>
            If this user profile was returned from a search, gets the distance in meters from the search origin.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.DistanceInMiles">
            <summary>
            If this user profile was returned from a search, gets the distance in miles from the search origin.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.DistanceInYards">
            <summary>
            If this user profile was returned from a search, gets the distance in yards from the search origin.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.FriendRequestPending">
            <summary>
            Does this user have a friends request pending.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.GameScores">
            <summary>
            Add and remove gamescore for this user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.GameStates">
            <summary>
            Add and remove GameStates for this user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.Gender">
            <summary>
            Gets the gender of the user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.GetProfilePhotosAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of profile photos.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Gets a list of profile photos for this user.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.GetProfilePictureString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.ID">
            <summary>
            Gets the system-wide unique ID of the user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.InitializeProfilePicture">
            <param name="profilePictureUrlOrId">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.LastLoginOn">
            <summary>
            Gets the last time this user logged on to the platform.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.Latitude">
            <summary>
            Gets the latitude of the last check-in for this user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.Longitude">
            <summary>
            Gets the longitude of the last check-in for this user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.Name">
            <summary>
            Gets the name of the user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.ProfilePicture">
            <summary>
            Gets the profile picture for this user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.ProfilePictureID">
            <summary>
            Gets the profile picture ID for this user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.Status">
            <summary>
            Gets the status of the user.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.User.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.UserGender.Any">
            <summary>To be added.</summary>
        </member>
        <member name="Buddy.UserGender.Female">
            <summary>To be added.</summary>
        </member>
        <member name="Buddy.UserGender.Male">
            <summary>To be added.</summary>
        </member>
        <member name="Buddy.UserMetadata.BatchSetAsync">
            <param name="keys">The keys of the metadata items, can't be null or empty.</param>
            <param name="values">The values of the metadata items, can't be null or empty.</param>
            <param name="latitude">The optional latitude of the metadata items.</param>
            <param name="longitude">The optional longitude of the metadata items.</param>
            <param name="appTag">The optional application tag for these items.</param>
            <summary>
            Set metadata item values for keys. You can additionally add a latitude and longitude coordinate to record the location
            from where these items were set, or tag all items with a custom tag. 
            The item doesn't have to exist to be set, this method acts as an Add method in cases where the item doesn't exist.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
            <exception cref="T:System.ArgumentException">When any key is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">When any value is or empty.</exception>
        </member>
        <member name="Buddy.UserMetadata.BatchSetAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the item was set, false otherwise.</param>
            <param name="keys">The keys of the metadata items, can't be null or empty.</param>
            <param name="values">The values of the metadata items, can't be null or empty.</param>
            <param name="latitude">The optional latitude of the metadata items.</param>
            <param name="longitude">The optional longitude of the metadata items.</param>
            <param name="appTag">The optional application tag for these items.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Set metadata item values for keys. You can additionally add a latitude and longitude coordinate to record the location
            from where these items were set, or tag all items with a custom tag. 
            The item doesn't have to exist to be set, this method acts as an Add method in cases where the item doesn't exist.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
            <exception cref="T:System.ArgumentException">When any key is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">When any value is or empty.</exception>
        </member>
        <member name="Buddy.UserMetadata.BatchSumAsync">
            <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
            <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
            <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
            <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
            <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
            <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
            <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            Unlike the 'Sum' method this method can take a list of keys separated by semicolons and will return a list of sums for all of those keys.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;MetadataSum&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.UserMetadata.BatchSumAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of sums corresponding to all the keys that were given to this method.</param>
            <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
            <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
            <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
            <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
            <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
            <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            Unlike the 'Sum' method this method can take a list of keys separated by semicolons and will return a list of sums for all of those keys.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.UserMetadata.DeleteAllAsync">
            <summary>
            Delete all user metadata. There is no way to recover from this operation, be careful when you call it.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.UserMetadata.DeleteAllAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if all metadata was deleted, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Delete all user metadata. There is no way to recover from this operation, be careful when you call it.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.UserMetadata.DeleteAsync">
            <param name="key">A valid key of a metadata item. The key can't be null or mpety.</param>
            <summary>
            Delete a metadata item referenced by key.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.UserMetadata.DeleteAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the item was deleted, false otherwise (i.e. doesn't exist).</param>
            <param name="key">A valid key of a metadata item. The key can't be null or mpety.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Delete a metadata item referenced by key.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.UserMetadata.FindAsync">
            <param name="searchDistanceMeters">The distance in meters from the latitude and longitude to search in. To ignore this distance pass in 40075000 (the circumferance of the earth).</param>
            <param name="latitude">The latitude from where the saerch will start.</param>
            <param name="longitude">The longitude from where the saerch will start.</param>
            <param name="numberOfResults">Optionally limit the number of returned metadata items.</param>
            <param name="withKey">Optionally search for items with a specific key. The value of this parameter is treated as a wildcard.</param>
            <param name="withValue">Optionally search for items with a specific value. The value of this parameter is treated as a wildcard.</param>
            <param name="updatedMinutesAgo">Optionally return only items that were updated some minutes ago.</param>
            <param name="searchAsFloat">Optionally treat all metadata values as floats. Useful for min/max searches.</param>
            <param name="sortAscending">Optionally sort the results ascending.</param>
            <param name="disableCache">Optionally disable cache searches.</param>
            <summary>
            Search for metadata items in this user. Note that this method will only find user-level metadata items.
            </summary>
            <returns>A Task&lt;IDictionary&lt;String,MetadataItem&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.UserMetadata.FindAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a dictionary of metadata keys mapped to items.</param>
            <param name="searchDistanceMeters">The distance in meters from the latitude and longitude to search in. To ignore this distance pass in 40075000 (the circumferance of the earth).</param>
            <param name="latitude">The latitude from where the saerch will start.</param>
            <param name="longitude">The longitude from where the saerch will start.</param>
            <param name="numberOfResults">Optionally limit the number of returned metadata items.</param>
            <param name="withKey">Optionally search for items with a specific key. The value of this parameter is treated as a wildcard.</param>
            <param name="withValue">Optionally search for items with a specific value. The value of this parameter is treated as a wildcard.</param>
            <param name="updatedMinutesAgo">Optionally return only items that were updated some minutes ago.</param>
            <param name="searchAsFloat">Optionally treat all metadata values as floats. Useful for min/max searches.</param>
            <param name="sortAscending">Optionally sort the results ascending.</param>
            <param name="disableCache">Optionally disable cache searches.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Search for metadata items in this user. Note that this method will only find user-level metadata items.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.UserMetadata.GetAllAsync">
            <summary>
            Get all the metadata items for this user. Note that this can be a very expensive method, try to retrieve specific items if possible
            or do a search.
            </summary>
            <returns>A Task&lt;IDictionary&lt;String,MetadataItem&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.UserMetadata.GetAllAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of all of the user's metadata items.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get all the metadata items for this user. Note that this can be a very expensive method, try to retrieve specific items if possible
            or do a search.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.UserMetadata.GetAsync">
            <param name="key">The key to use to reference the metadata item.</param>
            <summary>
            Get a metadata item with a key. The key can't be null or an empty string.
            </summary>
            <returns>A Task&lt;MetadataItem&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
            <exception cref="T:System.ArgumentException">When key is null or empty.</exception>
        </member>
        <member name="Buddy.UserMetadata.GetAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the metadata item or null if it doesn't exist.</param>
            <param name="key">The key to use to reference the metadata item.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a metadata item with a key. The key can't be null or an empty string.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
            <exception cref="T:System.ArgumentException">When key is null or empty.</exception>
        </member>
        <member name="Buddy.UserMetadata.SetAsync">
            <param name="key">The key of the metadata item, can't be null or empty.</param>
            <param name="value">The value of the metadata item, can't be null.</param>
            <param name="latitude">The optional latitude of the metadata item.</param>
            <param name="longitude">The optional longitude of the metadata item.</param>
            <param name="appTag">The optional application tag for this item.</param>
            <summary>
            Set a metadata item value for a key. You can additional add latitude and longitude coordinate to record the location
            from where this item was set, or tag the item with a custom tag. 
            The item doesn't have to exist to be set, this method acts as an Add method in cases where the item doesn't exist.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
            <exception cref="T:System.ArgumentException">When key is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">When value is null.</exception>
        </member>
        <member name="Buddy.UserMetadata.SetAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true if the item was set, false otherwise..</param>
            <param name="key">The key of the metadata item, can't be null or empty.</param>
            <param name="value">The value of the metadata item, can't be null.</param>
            <param name="latitude">The optional latitude of the metadata item.</param>
            <param name="longitude">The optional longitude of the metadata item.</param>
            <param name="appTag">The optional application tag for this item.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Set a metadata item value for a key. You can additional add latitude and longitude coordinate to record the location
            from where this item was set, or tag the item with a custom tag. 
            The item doesn't have to exist to be set, this method acts as an Add method in cases where the item doesn't exist.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
            <exception cref="T:System.ArgumentException">When key is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">When value is null.</exception>
        </member>
        <member name="Buddy.UserMetadata.SumAsync">
            <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
            <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
            <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
            <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
            <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
            <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
            <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            </summary>
            <returns>A Task&lt;MetadataSum&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.UserMetadata.SumAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a sum of all the found metadata item values.</param>
            <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
            <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
            <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
            <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
            <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
            <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.UserMetadata.Token">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.UserStatus.Any">
            <summary>To be added.</summary>
        </member>
        <member name="Buddy.UserStatus.Dating">
            <summary>To be added.</summary>
        </member>
        <member name="Buddy.UserStatus.Divorced">
            <summary>To be added.</summary>
        </member>
        <member name="Buddy.UserStatus.Engaged">
            <summary>To be added.</summary>
        </member>
        <member name="Buddy.UserStatus.Married">
            <summary>To be added.</summary>
        </member>
        <member name="Buddy.UserStatus.OnTheProwl">
            <summary>To be added.</summary>
        </member>
        <member name="Buddy.UserStatus.Single">
            <summary>To be added.</summary>
        </member>
        <member name="Buddy.UserStatus.Widowed">
            <summary>To be added.</summary>
        </member>
        <member name="Buddy.UserTaskWrappers.GetProfilePhotosAsync">
            <param name="user">To be added.</param>
            <summary>
            Gets a list of profile photos for this user.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;PicturePublic&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbum.AddPictureAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="picture">The picture to add to the virtual albums. Either PicturePublic or Picture works.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Add an existing (uploaded) photo to a virtual album. This photo can be either private or public (either PicturePublic and Picture will work).
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbum.AddPictureBatchAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="pictures">The list of pictures to add to this photo album. Either PicturePublic or Picture works.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Add a list of pictures to this virtual album.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbum.ApplicationTag">
            <summary>
            Gets the optional application tag for this virtual album.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbum.CreatedOn">
            <summary>
            Gets the date this virtual album was created.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbum.DeleteAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Delete this virtual album.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbum.ID">
            <summary>
            Gets the globally unique ID of the virtual album.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbum.LastUpdated">
            <summary>
            Gets the date this virtual album was last updated.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbum.Name">
            <summary>
            Gets the name of the virtual album.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbum.OwnerUserId">
            <summary>
            Gets the user ID of the owner of this virtual album.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbum.Pictures">
            <summary>
            Gets a readonly collection of pictures in this album. Use the AddPicture method to add more pictures to the album or the Picture.Delete method
            to remove them.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbum.RemovePictureAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="picture">The picture to remove from the album. Either PicturePublic or Picture works.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Remove a picture from this virtual album.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbum.ThumbnailUrl">
            <summary>
            Gets the thumbnail for the virtual album.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbum.UpdateAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="newName">The new name for the album.</param>
            <param name="newAppTag">An optional new application tag for the album.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Update this virtul albums name and app.tag
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbum.UpdatePictureAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
            <param name="picture">The picture to be updated, either PicturePublic or Picture works.</param>
            <param name="newComment">The new comment to set for the picture.</param>
            <param name="newAppTag">An optional new application tag for the picture.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Update virtual album picture comment or app.tag.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbums.CreateAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the new album.</param>
            <param name="name">The name of the new virtual album.</param>
            <param name="appTag">An optional application tag for the album.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Create a new virtual album. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbums.GetAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is the album.</param>
            <param name="albumId">The ID of the virtual album to retrieve.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get a virtual album by its globally unique identifier. All the album photos will be retreived as well. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbums.GetMyAsync">
            <param name="callback">The async callback to call on success or error. The first parameter is a list of album IDs that this user owns.</param>
            <param name="state">An optional user defined object that will be passed to the callback.</param>
            <summary>
            Get the IDs of all the virtual albums that this user owns.
            </summary>
            <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbumsTaskWrappers.CreateAsync">
            <param name="virtualAlbums">To be added.</param>
            <param name="name">The name of the new virtual album.</param>
            <param name="appTag">An optional application tag for the album.</param>
            <summary>
            Create a new virtual album. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>A Task&lt;VirtualAlbum&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbumsTaskWrappers.GetAsync">
            <param name="virtualAlbums">To be added.</param>
            <param name="albumId">The ID of the virtual album to retrieve.</param>
            <summary>
            Get a virtual album by its globally unique identifier. All the album photos will be retreived as well. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
            <returns>A Task&lt;VirtualAlbum&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbumsTaskWrappers.GetMyAsync">
            <param name="virtualAlbums">To be added.</param>
            <summary>
            Get the IDs of all the virtual albums that this user owns.
            </summary>
            <returns>A Task&lt;IEnumerable&lt;Int32&gt; &gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbumTaskWrappers.AddPictureAsync">
            <param name="virtualAlbum">To be added.</param>
            <param name="picture">The picture to add to the virtual albums. Either PicturePublic or Picture works.</param>
            <summary>
            Add an existing (uploaded) photo to a virtual album. This photo can be either private or public (either PicturePublic and Picture will work).
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbumTaskWrappers.AddPictureBatchAsync">
            <param name="virtualAlbum">To be added.</param>
            <param name="pictures">The list of pictures to add to this photo album. Either PicturePublic or Picture works.</param>
            <summary>
            Add a list of pictures to this virtual album.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbumTaskWrappers.DeleteAsync">
            <param name="virtualAlbum">To be added.</param>
            <summary>
            Delete this virtual album.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbumTaskWrappers.RemovePictureAsync">
            <param name="virtualAlbum">To be added.</param>
            <param name="picture">The picture to remove from the album. Either PicturePublic or Picture works.</param>
            <summary>
            Remove a picture from this virtual album.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbumTaskWrappers.UpdateAsync">
            <param name="virtualAlbum">To be added.</param>
            <param name="newName">The new name for the album.</param>
            <param name="newAppTag">An optional new application tag for the album.</param>
            <summary>
            Update this virtul albums name and app.tag
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="Buddy.VirtualAlbumTaskWrappers.UpdatePictureAsync">
            <param name="virtualAlbum">To be added.</param>
            <param name="picture">The picture to be updated, either PicturePublic or Picture works.</param>
            <param name="newComment">The new comment to set for the picture.</param>
            <param name="newAppTag">An optional new application tag for the picture.</param>
            <summary>
            Update virtual album picture comment or app.tag.
            </summary>
            <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
            <remarks>To be added.</remarks>
        </member>
    </members>
</doc>
